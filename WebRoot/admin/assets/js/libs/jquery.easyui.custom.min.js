/**
 * jQuery EasyUI 1.3.3
 * Includes: draggable.js, resizable.js, tooltip.js, linkbutton.js, progressbar.js, layout.js, panel.js, tabs.js, window.js, dialog.js
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 *
 * Licensed under the GPL or commercial licenses
 * To use it on other terms please contact us: info@jeasyui.com
 * http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 *
 */
(function($) {
	$.parser = {
		auto: true,
		onComplete: function(_1) {},
		plugins: ["draggable", "droppable", "resizable", "tooltip", "linkbutton", "progressbar", "layout", "panel", "tabs", "window", "dialog"],
		parse: function(_2) {
			var aa = [];
			for (var i = 0; i < $.parser.plugins.length; i++) {
				var _3 = $.parser.plugins[i];
				var r = $(".easyui-" + _3, _2);
				if (r.length) {
					if (r[_3]) {
						r[_3]();
					} else {
						aa.push({
							name: _3,
							jq: r
						});
					}
				}
			}
			if (aa.length && window.easyloader) {
				var _4 = [];
				for (var i = 0; i < aa.length; i++) {
					_4.push(aa[i].name);
				}
				easyloader.load(_4, function() {
					for (var i = 0; i < aa.length; i++) {
						var _5 = aa[i].name;
						var jq = aa[i].jq;
						jq[_5]();
					}
					$.parser.onComplete.call($.parser, _2);
				});
			} else {
				$.parser.onComplete.call($.parser, _2);
			}
		},
		parseOptions: function(_6, _7) {
			var t = $(_6);
			var _8 = {};
			var s = $.trim(t.attr("data-options"));
			if (s) {
				var _9 = s.substring(0, 1);
				var _a = s.substring(s.length - 1, 1);
				if (_9 != "{") {
					s = "{" + s;
				}
				if (_a != "}") {
					s = s + "}";
				}
				_8 = (new Function("return " + s))();
			}
			if (_7) {
				var _b = {};
				for (var i = 0; i < _7.length; i++) {
					var pp = _7[i];
					if (typeof pp == "string") {
						if (pp == "width" || pp == "height" || pp == "left" || pp == "top") {
							_b[pp] = parseInt(_6.style[pp]) || undefined;
						} else {
							_b[pp] = t.attr(pp);
						}
					} else {
						for (var _c in pp) {
							var _d = pp[_c];
							if (_d == "boolean") {
								_b[_c] = t.attr(_c) ? (t.attr(_c) == "true") : undefined;
							} else {
								if (_d == "number") {
									_b[_c] = t.attr(_c) == "0" ? 0 : parseFloat(t.attr(_c)) || undefined;
								}
							}
						}
					}
				}
				$.extend(_8, _b);
			}
			return _8;
		}
	};
	$(function() {
		var d = $("<div style=\"position:absolute;top:-1000px;width:100px;height:100px;padding:5px\"></div>").appendTo("body");
		$._boxModel = parseInt(d.width()) == 100;
		d.remove();
		if (!window.easyloader && $.parser.auto) {
			$.parser.parse();
		}
	});
	$.fn._outerWidth = function(_e) {
		if (_e == undefined) {
			if (this[0] == window) {
				return this.width() || document.body.clientWidth;
			}
			return this.outerWidth() || 0;
		}
		return this.each(function() {
			if ($._boxModel) {
				$(this).width(_e - ($(this).outerWidth() - $(this).width()));
			} else {
				$(this).width(_e);
			}
		});
	};
	$.fn._outerHeight = function(_f) {
		if (_f == undefined) {
			if (this[0] == window) {
				return this.height() || document.body.clientHeight;
			}
			return this.outerHeight() || 0;
		}
		return this.each(function() {
			if ($._boxModel) {
				$(this).height(_f - ($(this).outerHeight() - $(this).height()));
			} else {
				$(this).height(_f);
			}
		});
	};
	$.fn._scrollLeft = function(_10) {
		if (_10 == undefined) {
			return this.scrollLeft();
		} else {
			return this.each(function() {
				$(this).scrollLeft(_10);
			});
		}
	};
	$.fn._propAttr = $.fn.prop || $.fn.attr;
	$.fn._fit = function(fit) {
		fit = fit == undefined ? true : fit;
		var t = this[0];
		var p = (t.tagName == "BODY" ? t : this.parent()[0]);
		var _11 = p.fcount || 0;
		if (fit) {
			if (!t.fitted) {
				t.fitted = true;
				p.fcount = _11 + 1;
				$(p).addClass("panel-noscroll");
				if (p.tagName == "BODY") {
					$("html").addClass("panel-fit");
				}
			}
		} else {
			if (t.fitted) {
				t.fitted = false;
				p.fcount = _11 - 1;
				if (p.fcount == 0) {
					$(p).removeClass("panel-noscroll");
					if (p.tagName == "BODY") {
						$("html").removeClass("panel-fit");
					}
				}
			}
		}
		return {
			width: $(p).width(),
			height: $(p).height()
		};
	};
})(jQuery);
(function($) {
	var _12 = false;

	function _13(e) {
		var _14 = $.data(e.data.target, "draggable");
		var _15 = _14.options;
		var _16 = _14.proxy;
		var _17 = e.data;
		var _18 = _17.startLeft + e.pageX - _17.startX;
		var top = _17.startTop + e.pageY - _17.startY;
		if (_16) {
			if (_16.parent()[0] == document.body) {
				if (_15.deltaX != null && _15.deltaX != undefined) {
					_18 = e.pageX + _15.deltaX;
				} else {
					_18 = e.pageX - e.data.offsetWidth;
				}
				if (_15.deltaY != null && _15.deltaY != undefined) {
					top = e.pageY + _15.deltaY;
				} else {
					top = e.pageY - e.data.offsetHeight;
				}
			} else {
				if (_15.deltaX != null && _15.deltaX != undefined) {
					_18 += e.data.offsetWidth + _15.deltaX;
				}
				if (_15.deltaY != null && _15.deltaY != undefined) {
					top += e.data.offsetHeight + _15.deltaY;
				}
			}
		}
		if (e.data.parent != document.body) {
			_18 += $(e.data.parent).scrollLeft();
			top += $(e.data.parent).scrollTop();
		}
		if (_15.axis == "h") {
			_17.left = _18;
		} else {
			if (_15.axis == "v") {
				_17.top = top;
			} else {
				_17.left = _18;
				_17.top = top;
			}
		}
	};

	function _19(e) {
		var _1a = $.data(e.data.target, "draggable");
		var _1b = _1a.options;
		var _1c = _1a.proxy;
		if (!_1c) {
			_1c = $(e.data.target);
		}
		_1c.css({
			left: e.data.left,
			top: e.data.top
		});
		$("body").css("cursor", _1b.cursor);
	};

	function _1d(e) {
		_12 = true;
		var _1e = $.data(e.data.target, "draggable");
		var _1f = _1e.options;
		var _20 = $(".droppable").filter(function() {
			return e.data.target != this;
		}).filter(function() {
			var _21 = $.data(this, "droppable").options.accept;
			if (_21) {
				return $(_21).filter(function() {
					return this == e.data.target;
				}).length > 0;
			} else {
				return true;
			}
		});
		_1e.droppables = _20;
		var _22 = _1e.proxy;
		if (!_22) {
			if (_1f.proxy) {
				if (_1f.proxy == "clone") {
					_22 = $(e.data.target).clone().insertAfter(e.data.target);
				} else {
					_22 = _1f.proxy.call(e.data.target, e.data.target);
				}
				_1e.proxy = _22;
			} else {
				_22 = $(e.data.target);
			}
		}
		_22.css("position", "absolute");
		_13(e);
		_19(e);
		_1f.onStartDrag.call(e.data.target, e);
		return false;
	};

	function _23(e) {
		var _24 = $.data(e.data.target, "draggable");
		_13(e);
		if (_24.options.onDrag.call(e.data.target, e) != false) {
			_19(e);
		}
		var _25 = e.data.target;
		_24.droppables.each(function() {
			var _26 = $(this);
			if (_26.droppable("options").disabled) {
				return;
			}
			var p2 = _26.offset();
			if (e.pageX > p2.left && e.pageX < p2.left + _26.outerWidth() && e.pageY > p2.top && e.pageY < p2.top + _26.outerHeight()) {
				if (!this.entered) {
					$(this).trigger("_dragenter", [_25]);
					this.entered = true;
				}
				$(this).trigger("_dragover", [_25]);
			} else {
				if (this.entered) {
					$(this).trigger("_dragleave", [_25]);
					this.entered = false;
				}
			}
		});
		return false;
	};

	function _27(e) {
		_12 = false;
		_23(e);
		var _28 = $.data(e.data.target, "draggable");
		var _29 = _28.proxy;
		var _2a = _28.options;
		if (_2a.revert) {
			if (_2b() == true) {
				$(e.data.target).css({
					position: e.data.startPosition,
					left: e.data.startLeft,
					top: e.data.startTop
				});
			} else {
				if (_29) {
					var _2c, top;
					if (_29.parent()[0] == document.body) {
						_2c = e.data.startX - e.data.offsetWidth;
						top = e.data.startY - e.data.offsetHeight;
					} else {
						_2c = e.data.startLeft;
						top = e.data.startTop;
					}
					_29.animate({
						left: _2c,
						top: top
					}, function() {
						_2d();
					});
				} else {
					$(e.data.target).animate({
						left: e.data.startLeft,
						top: e.data.startTop
					}, function() {
						$(e.data.target).css("position", e.data.startPosition);
					});
				}
			}
		} else {
			$(e.data.target).css({
				position: "absolute",
				left: e.data.left,
				top: e.data.top
			});
			_2b();
		}
		_2a.onStopDrag.call(e.data.target, e);
		$(document).unbind(".draggable");
		setTimeout(function() {
			$("body").css("cursor", "");
		}, 100);

		function _2d() {
			if (_29) {
				_29.remove();
			}
			_28.proxy = null;
		};

		function _2b() {
			var _2e = false;
			_28.droppables.each(function() {
				var _2f = $(this);
				if (_2f.droppable("options").disabled) {
					return;
				}
				var p2 = _2f.offset();
				if (e.pageX > p2.left && e.pageX < p2.left + _2f.outerWidth() && e.pageY > p2.top && e.pageY < p2.top + _2f.outerHeight()) {
					if (_2a.revert) {
						$(e.data.target).css({
							position: e.data.startPosition,
							left: e.data.startLeft,
							top: e.data.startTop
						});
					}
					$(this).trigger("_drop", [e.data.target]);
					_2d();
					_2e = true;
					this.entered = false;
					return false;
				}
			});
			if (!_2e && !_2a.revert) {
				_2d();
			}
			return _2e;
		};
		return false;
	};
	$.fn.draggable = function(_30, _31) {
		if (typeof _30 == "string") {
			return $.fn.draggable.methods[_30](this, _31);
		}
		return this.each(function() {
			var _32;
			var _33 = $.data(this, "draggable");
			if (_33) {
				_33.handle.unbind(".draggable");
				_32 = $.extend(_33.options, _30);
			} else {
				_32 = $.extend({}, $.fn.draggable.defaults, $.fn.draggable.parseOptions(this), _30 || {});
			}
			if (_32.disabled == true) {
				$(this).css("cursor", "");
				return;
			}
			var _34 = null;
			if (typeof _32.handle == "undefined" || _32.handle == null) {
				_34 = $(this);
			} else {
				_34 = (typeof _32.handle == "string" ? $(_32.handle, this) : _32.handle);
			}
			$.data(this, "draggable", {
				options: _32,
				handle: _34
			});
			_34.unbind(".draggable").bind("mousemove.draggable", {
				target: this
			}, function(e) {
				if (_12) {
					return;
				}
				var _35 = $.data(e.data.target, "draggable").options;
				if (_36(e)) {
					$(this).css("cursor", _35.cursor);
				} else {
					$(this).css("cursor", "");
				}
			}).bind("mouseleave.draggable", {
				target: this
			}, function(e) {
				$(this).css("cursor", "");
			}).bind("mousedown.draggable", {
				target: this
			}, function(e) {
				if (_36(e) == false) {
					return;
				}
				$(this).css("cursor", "");
				var _37 = $(e.data.target).position();
				var _38 = $(e.data.target).offset();
				var _39 = {
					startPosition: $(e.data.target).css("position"),
					startLeft: _37.left,
					startTop: _37.top,
					left: _37.left,
					top: _37.top,
					startX: e.pageX,
					startY: e.pageY,
					offsetWidth: (e.pageX - _38.left),
					offsetHeight: (e.pageY - _38.top),
					target: e.data.target,
					parent: $(e.data.target).parent()[0]
				};
				$.extend(e.data, _39);
				var _3a = $.data(e.data.target, "draggable").options;
				if (_3a.onBeforeDrag.call(e.data.target, e) == false) {
					return;
				}
				$(document).bind("mousedown.draggable", e.data, _1d);
				$(document).bind("mousemove.draggable", e.data, _23);
				$(document).bind("mouseup.draggable", e.data, _27);
			});

			function _36(e) {
				var _3b = $.data(e.data.target, "draggable");
				var _3c = _3b.handle;
				var _3d = $(_3c).offset();
				var _3e = $(_3c).outerWidth();
				var _3f = $(_3c).outerHeight();
				var t = e.pageY - _3d.top;
				var r = _3d.left + _3e - e.pageX;
				var b = _3d.top + _3f - e.pageY;
				var l = e.pageX - _3d.left;
				return Math.min(t, r, b, l) > _3b.options.edge;
			};
		});
	};
	$.fn.draggable.methods = {
		options: function(jq) {
			return $.data(jq[0], "draggable").options;
		},
		proxy: function(jq) {
			return $.data(jq[0], "draggable").proxy;
		},
		enable: function(jq) {
			return jq.each(function() {
				$(this).draggable({
					disabled: false
				});
			});
		},
		disable: function(jq) {
			return jq.each(function() {
				$(this).draggable({
					disabled: true
				});
			});
		}
	};
	$.fn.draggable.parseOptions = function(_40) {
		var t = $(_40);
		return $.extend({}, $.parser.parseOptions(_40, ["cursor", "handle", "axis",
		{
			"revert": "boolean",
			"deltaX": "number",
			"deltaY": "number",
			"edge": "number"
		}]), {
			disabled: (t.attr("disabled") ? true : undefined)
		});
	};
	$.fn.draggable.defaults = {
		proxy: null,
		revert: false,
		cursor: "move",
		deltaX: null,
		deltaY: null,
		handle: null,
		disabled: false,
		edge: 0,
		axis: null,
		onBeforeDrag: function(e) {},
		onStartDrag: function(e) {},
		onDrag: function(e) {},
		onStopDrag: function(e) {}
	};
	$(function() {
		function _41(e) {
			var _42 = e.changedTouches,
				_43 = _42[0],
				_44 = "";
			switch (e.type) {
			case "touchstart":
				_44 = "mousedown";
				break;
			case "touchmove":
				_44 = "mousemove";
				break;
			case "touchend":
				_44 = "mouseup";
				break;
			default:
				return;
			}
			var _45 = document.createEvent("MouseEvent");
			_45.initMouseEvent(_44, true, true, window, 1, _43.screenX, _43.screenY, _43.clientX, _43.clientY, false, false, false, false, 0, null);
			_43.target.dispatchEvent(_45);
			if (_12) {
				e.preventDefault();
			}
		};
		if (document.addEventListener) {
			document.addEventListener("touchstart", _41, true);
			document.addEventListener("touchmove", _41, true);
			document.addEventListener("touchend", _41, true);
			document.addEventListener("touchcancel", _41, true);
		}
	});
})(jQuery);
(function($) {
	function _46(_47) {
		$(_47).addClass("droppable");
		$(_47).bind("_dragenter", function(e, _48) {
			$.data(_47, "droppable").options.onDragEnter.apply(_47, [e, _48]);
		});
		$(_47).bind("_dragleave", function(e, _49) {
			$.data(_47, "droppable").options.onDragLeave.apply(_47, [e, _49]);
		});
		$(_47).bind("_dragover", function(e, _4a) {
			$.data(_47, "droppable").options.onDragOver.apply(_47, [e, _4a]);
		});
		$(_47).bind("_drop", function(e, _4b) {
			$.data(_47, "droppable").options.onDrop.apply(_47, [e, _4b]);
		});
	};
	$.fn.droppable = function(_4c, _4d) {
		if (typeof _4c == "string") {
			return $.fn.droppable.methods[_4c](this, _4d);
		}
		_4c = _4c || {};
		return this.each(function() {
			var _4e = $.data(this, "droppable");
			if (_4e) {
				$.extend(_4e.options, _4c);
			} else {
				_46(this);
				$.data(this, "droppable", {
					options: $.extend({}, $.fn.droppable.defaults, $.fn.droppable.parseOptions(this), _4c)
				});
			}
		});
	};
	$.fn.droppable.methods = {
		options: function(jq) {
			return $.data(jq[0], "droppable").options;
		},
		enable: function(jq) {
			return jq.each(function() {
				$(this).droppable({
					disabled: false
				});
			});
		},
		disable: function(jq) {
			return jq.each(function() {
				$(this).droppable({
					disabled: true
				});
			});
		}
	};
	$.fn.droppable.parseOptions = function(_4f) {
		var t = $(_4f);
		return $.extend({}, $.parser.parseOptions(_4f, ["accept"]), {
			disabled: (t.attr("disabled") ? true : undefined)
		});
	};
	$.fn.droppable.defaults = {
		accept: null,
		disabled: false,
		onDragEnter: function(e, _50) {},
		onDragOver: function(e, _51) {},
		onDragLeave: function(e, _52) {},
		onDrop: function(e, _53) {}
	};
})(jQuery);
(function($) {
	var _54 = false;
	$.fn.resizable = function(_55, _56) {
		if (typeof _55 == "string") {
			return $.fn.resizable.methods[_55](this, _56);
		}

		function _57(e) {
			var _58 = e.data;
			var _59 = $.data(_58.target, "resizable").options;
			if (_58.dir.indexOf("e") != -1) {
				var _5a = _58.startWidth + e.pageX - _58.startX;
				_5a = Math.min(Math.max(_5a, _59.minWidth), _59.maxWidth);
				_58.width = _5a;
			}
			if (_58.dir.indexOf("s") != -1) {
				var _5b = _58.startHeight + e.pageY - _58.startY;
				_5b = Math.min(Math.max(_5b, _59.minHeight), _59.maxHeight);
				_58.height = _5b;
			}
			if (_58.dir.indexOf("w") != -1) {
				var _5a = _58.startWidth - e.pageX + _58.startX;
				_5a = Math.min(Math.max(_5a, _59.minWidth), _59.maxWidth);
				_58.width = _5a;
				_58.left = _58.startLeft + _58.startWidth - _58.width;
			}
			if (_58.dir.indexOf("n") != -1) {
				var _5b = _58.startHeight - e.pageY + _58.startY;
				_5b = Math.min(Math.max(_5b, _59.minHeight), _59.maxHeight);
				_58.height = _5b;
				_58.top = _58.startTop + _58.startHeight - _58.height;
			}
		};

		function _5c(e) {
			var _5d = e.data;
			var t = $(_5d.target);
			t.css({
				left: _5d.left,
				top: _5d.top
			});
			if (t.outerWidth() != _5d.width) {
				t._outerWidth(_5d.width);
			}
			if (t.outerHeight() != _5d.height) {
				t._outerHeight(_5d.height);
			}
		};

		function _5e(e) {
			_54 = true;
			$.data(e.data.target, "resizable").options.onStartResize.call(e.data.target, e);
			return false;
		};

		function _5f(e) {
			_57(e);
			if ($.data(e.data.target, "resizable").options.onResize.call(e.data.target, e) != false) {
				_5c(e);
			}
			return false;
		};

		function _60(e) {
			_54 = false;
			_57(e, true);
			_5c(e);
			$.data(e.data.target, "resizable").options.onStopResize.call(e.data.target, e);
			$(document).unbind(".resizable");
			$("body").css("cursor", "");
			return false;
		};
		return this.each(function() {
			var _61 = null;
			var _62 = $.data(this, "resizable");
			if (_62) {
				$(this).unbind(".resizable");
				_61 = $.extend(_62.options, _55 || {});
			} else {
				_61 = $.extend({}, $.fn.resizable.defaults, $.fn.resizable.parseOptions(this), _55 || {});
				$.data(this, "resizable", {
					options: _61
				});
			}
			if (_61.disabled == true) {
				return;
			}
			$(this).bind("mousemove.resizable", {
				target: this
			}, function(e) {
				if (_54) {
					return;
				}
				var dir = _63(e);
				if (dir == "") {
					$(e.data.target).css("cursor", "");
				} else {
					$(e.data.target).css("cursor", dir + "-resize");
				}
			}).bind("mouseleave.resizable", {
				target: this
			}, function(e) {
				$(e.data.target).css("cursor", "");
			}).bind("mousedown.resizable", {
				target: this
			}, function(e) {
				var dir = _63(e);
				if (dir == "") {
					return;
				}

				function _64(css) {
					var val = parseInt($(e.data.target).css(css));
					if (isNaN(val)) {
						return 0;
					} else {
						return val;
					}
				};
				var _65 = {
					target: e.data.target,
					dir: dir,
					startLeft: _64("left"),
					startTop: _64("top"),
					left: _64("left"),
					top: _64("top"),
					startX: e.pageX,
					startY: e.pageY,
					startWidth: $(e.data.target).outerWidth(),
					startHeight: $(e.data.target).outerHeight(),
					width: $(e.data.target).outerWidth(),
					height: $(e.data.target).outerHeight(),
					deltaWidth: $(e.data.target).outerWidth() - $(e.data.target).width(),
					deltaHeight: $(e.data.target).outerHeight() - $(e.data.target).height()
				};
				$(document).bind("mousedown.resizable", _65, _5e);
				$(document).bind("mousemove.resizable", _65, _5f);
				$(document).bind("mouseup.resizable", _65, _60);
				$("body").css("cursor", dir + "-resize");
			});

			function _63(e) {
				var tt = $(e.data.target);
				var dir = "";
				var _66 = tt.offset();
				var _67 = tt.outerWidth();
				var _68 = tt.outerHeight();
				var _69 = _61.edge;
				if (e.pageY > _66.top && e.pageY < _66.top + _69) {
					dir += "n";
				} else {
					if (e.pageY < _66.top + _68 && e.pageY > _66.top + _68 - _69) {
						dir += "s";
					}
				}
				if (e.pageX > _66.left && e.pageX < _66.left + _69) {
					dir += "w";
				} else {
					if (e.pageX < _66.left + _67 && e.pageX > _66.left + _67 - _69) {
						dir += "e";
					}
				}
				var _6a = _61.handles.split(",");
				for (var i = 0; i < _6a.length; i++) {
					var _6b = _6a[i].replace(/(^\s*)|(\s*$)/g, "");
					if (_6b == "all" || _6b == dir) {
						return dir;
					}
				}
				return "";
			};
		});
	};
	$.fn.resizable.methods = {
		options: function(jq) {
			return $.data(jq[0], "resizable").options;
		},
		enable: function(jq) {
			return jq.each(function() {
				$(this).resizable({
					disabled: false
				});
			});
		},
		disable: function(jq) {
			return jq.each(function() {
				$(this).resizable({
					disabled: true
				});
			});
		}
	};
	$.fn.resizable.parseOptions = function(_6c) {
		var t = $(_6c);
		return $.extend({}, $.parser.parseOptions(_6c, ["handles",
		{
			minWidth: "number",
			minHeight: "number",
			maxWidth: "number",
			maxHeight: "number",
			edge: "number"
		}]), {
			disabled: (t.attr("disabled") ? true : undefined)
		});
	};
	$.fn.resizable.defaults = {
		disabled: false,
		handles: "n, e, s, w, ne, se, sw, nw, all",
		minWidth: 10,
		minHeight: 10,
		maxWidth: 10000,
		maxHeight: 10000,
		edge: 5,
		onStartResize: function(e) {},
		onResize: function(e) {},
		onStopResize: function(e) {}
	};
})(jQuery);
(function($) {
	function _6d(_6e) {
		var _6f = $.data(_6e, "linkbutton").options;
		var t = $(_6e);
		t.addClass("l-btn").removeClass("l-btn-plain l-btn-selected l-btn-plain-selected");
		if (_6f.plain) {
			t.addClass("l-btn-plain");
		}
		if (_6f.selected) {
			t.addClass(_6f.plain ? "l-btn-selected l-btn-plain-selected" : "l-btn-selected");
		}
		t.attr("group", _6f.group || "");
		t.attr("id", _6f.id || "");
		t.html("<span class=\"l-btn-left\">" + "<span class=\"l-btn-text\"></span>" + "</span>");
		if (_6f.text) {
			t.find(".l-btn-text").html(_6f.text);
			if (_6f.iconCls) {
				t.find(".l-btn-text").addClass(_6f.iconCls).addClass(_6f.iconAlign == "left" ? "l-btn-icon-left" : "l-btn-icon-right");
			}
		} else {
			t.find(".l-btn-text").html("<span class=\"l-btn-empty\">&nbsp;</span>");
			if (_6f.iconCls) {
				t.find(".l-btn-empty").addClass(_6f.iconCls);
			}
		}
		t.unbind(".linkbutton").bind("focus.linkbutton", function() {
			if (!_6f.disabled) {
				$(this).find(".l-btn-text").addClass("l-btn-focus");
			}
		}).bind("blur.linkbutton", function() {
			$(this).find(".l-btn-text").removeClass("l-btn-focus");
		});
		if (_6f.toggle && !_6f.disabled) {
			t.bind("click.linkbutton", function() {
				if (_6f.selected) {
					$(this).linkbutton("unselect");
				} else {
					$(this).linkbutton("select");
				}
			});
		}
		_70(_6e, _6f.selected);
		_71(_6e, _6f.disabled);
	};

	function _70(_72, _73) {
		var _74 = $.data(_72, "linkbutton").options;
		if (_73) {
			if (_74.group) {
				$("a.l-btn[group=\"" + _74.group + "\"]").each(function() {
					var o = $(this).linkbutton("options");
					if (o.toggle) {
						$(this).removeClass("l-btn-selected l-btn-plain-selected");
						o.selected = false;
					}
				});
			}
			$(_72).addClass(_74.plain ? "l-btn-selected l-btn-plain-selected" : "l-btn-selected");
			_74.selected = true;
		} else {
			if (!_74.group) {
				$(_72).removeClass("l-btn-selected l-btn-plain-selected");
				_74.selected = false;
			}
		}
	};

	function _71(_75, _76) {
		var _77 = $.data(_75, "linkbutton");
		var _78 = _77.options;
		$(_75).removeClass("l-btn-disabled l-btn-plain-disabled");
		if (_76) {
			_78.disabled = true;
			var _79 = $(_75).attr("href");
			if (_79) {
				_77.href = _79;
				$(_75).attr("href", "javascript:void(0)");
			}
			if (_75.onclick) {
				_77.onclick = _75.onclick;
				_75.onclick = null;
			}
			_78.plain ? $(_75).addClass("l-btn-disabled l-btn-plain-disabled") : $(_75).addClass("l-btn-disabled");
		} else {
			_78.disabled = false;
			if (_77.href) {
				$(_75).attr("href", _77.href);
			}
			if (_77.onclick) {
				_75.onclick = _77.onclick;
			}
		}
	};
	$.fn.linkbutton = function(_7a, _7b) {
		if (typeof _7a == "string") {
			return $.fn.linkbutton.methods[_7a](this, _7b);
		}
		_7a = _7a || {};
		return this.each(function() {
			var _7c = $.data(this, "linkbutton");
			if (_7c) {
				$.extend(_7c.options, _7a);
			} else {
				$.data(this, "linkbutton", {
					options: $.extend({}, $.fn.linkbutton.defaults, $.fn.linkbutton.parseOptions(this), _7a)
				});
				$(this).removeAttr("disabled");
			}
			_6d(this);
		});
	};
	$.fn.linkbutton.methods = {
		options: function(jq) {
			return $.data(jq[0], "linkbutton").options;
		},
		enable: function(jq) {
			return jq.each(function() {
				_71(this, false);
			});
		},
		disable: function(jq) {
			return jq.each(function() {
				_71(this, true);
			});
		},
		select: function(jq) {
			return jq.each(function() {
				_70(this, true);
			});
		},
		unselect: function(jq) {
			return jq.each(function() {
				_70(this, false);
			});
		}
	};
	$.fn.linkbutton.parseOptions = function(_7d) {
		var t = $(_7d);
		return $.extend({}, $.parser.parseOptions(_7d, ["id", "iconCls", "iconAlign", "group",
		{
			plain: "boolean",
			toggle: "boolean",
			selected: "boolean"
		}]), {
			disabled: (t.attr("disabled") ? true : undefined),
			text: $.trim(t.html()),
			iconCls: (t.attr("icon") || t.attr("iconCls"))
		});
	};
	$.fn.linkbutton.defaults = {
		id: null,
		disabled: false,
		toggle: false,
		selected: false,
		group: null,
		plain: false,
		text: "",
		iconCls: null,
		iconAlign: "left"
	};
})(jQuery);

(function($) {
	function init(_19d) {
		$(_19d).addClass("progressbar");
		$(_19d).html("<div class=\"progressbar-text\"></div><div class=\"progressbar-value\"><div class=\"progressbar-text\"></div></div>");
		return $(_19d);
	};

	function _19e(_19f, _1a0) {
		var opts = $.data(_19f, "progressbar").options;
		var bar = $.data(_19f, "progressbar").bar;
		if (_1a0) {
			opts.width = _1a0;
		}
		bar._outerWidth(opts.width)._outerHeight(opts.height);
		bar.find("div.progressbar-text").width(bar.width());
		bar.find("div.progressbar-text,div.progressbar-value").css({
			height: bar.height() + "px",
			lineHeight: bar.height() + "px"
		});
	};
	$.fn.progressbar = function(_1a1, _1a2) {
		if (typeof _1a1 == "string") {
			var _1a3 = $.fn.progressbar.methods[_1a1];
			if (_1a3) {
				return _1a3(this, _1a2);
			}
		}
		_1a1 = _1a1 || {};
		return this.each(function() {
			var _1a4 = $.data(this, "progressbar");
			if (_1a4) {
				$.extend(_1a4.options, _1a1);
			} else {
				_1a4 = $.data(this, "progressbar", {
					options: $.extend({}, $.fn.progressbar.defaults, $.fn.progressbar.parseOptions(this), _1a1),
					bar: init(this)
				});
			}
			$(this).progressbar("setValue", _1a4.options.value);
			_19e(this);
		});
	};
	$.fn.progressbar.methods = {
		options: function(jq) {
			return $.data(jq[0], "progressbar").options;
		},
		resize: function(jq, _1a5) {
			return jq.each(function() {
				_19e(this, _1a5);
			});
		},
		getValue: function(jq) {
			return $.data(jq[0], "progressbar").options.value;
		},
		setValue: function(jq, _1a6) {
			if (_1a6 < 0) {
				_1a6 = 0;
			}
			if (_1a6 > 100) {
				_1a6 = 100;
			}
			return jq.each(function() {
				var opts = $.data(this, "progressbar").options;
				var text = opts.text.replace(/{value}/, _1a6);
				var _1a7 = opts.value;
				opts.value = _1a6;
				$(this).find("div.progressbar-value").width(_1a6 + "%");
				$(this).find("div.progressbar-text").html(text);
				if (_1a7 != _1a6) {
					opts.onChange.call(this, _1a6, _1a7);
				}
			});
		}
	};
	$.fn.progressbar.parseOptions = function(_1a8) {
		return $.extend({}, $.parser.parseOptions(_1a8, ["width", "height", "text",
		{
			value: "number"
		}]));
	};
	$.fn.progressbar.defaults = {
		width: "auto",
		height: 22,
		value: 0,
		text: "{value}%",
		onChange: function(_1a9, _1aa) {}
	};
})(jQuery);

(function($) {
	function init(_1ab) {
		$(_1ab).addClass("tooltip-f");
	};

	function _1ac(_1ad) {
		var opts = $.data(_1ad, "tooltip").options;
		$(_1ad).unbind(".tooltip").bind(opts.showEvent + ".tooltip", function(e) {
			_1b4(_1ad, e);
		}).bind(opts.hideEvent + ".tooltip", function(e) {
			_1ba(_1ad, e);
		}).bind("mousemove.tooltip", function(e) {
			if (opts.trackMouse) {
				opts.trackMouseX = e.pageX;
				opts.trackMouseY = e.pageY;
				_1ae(_1ad);
			}
		});
	};

	function _1af(_1b0) {
		var _1b1 = $.data(_1b0, "tooltip");
		if (_1b1.showTimer) {
			clearTimeout(_1b1.showTimer);
			_1b1.showTimer = null;
		}
		if (_1b1.hideTimer) {
			clearTimeout(_1b1.hideTimer);
			_1b1.hideTimer = null;
		}
	};

	function _1ae(_1b2) {
		var _1b3 = $.data(_1b2, "tooltip");
		if (!_1b3 || !_1b3.tip) {
			return;
		}
		var opts = _1b3.options;
		var tip = _1b3.tip;
		if (opts.trackMouse) {
			t = $();
			var left = opts.trackMouseX + opts.deltaX;
			var top = opts.trackMouseY + opts.deltaY;
		} else {
			var t = $(_1b2);
			var left = t.offset().left + opts.deltaX;
			var top = t.offset().top + opts.deltaY;
		}
		switch (opts.position) {
		case "right":
			left += t._outerWidth() + 12 + (opts.trackMouse ? 12 : 0);
			top -= (tip._outerHeight() - t._outerHeight()) / 2;
			break;
		case "left":
			left -= tip._outerWidth() + 12 + (opts.trackMouse ? 12 : 0);
			top -= (tip._outerHeight() - t._outerHeight()) / 2;
			break;
		case "top":
			left -= (tip._outerWidth() - t._outerWidth()) / 2;
			top -= tip._outerHeight() + 12 + (opts.trackMouse ? 12 : 0);
			break;
		case "bottom":
			left -= (tip._outerWidth() - t._outerWidth()) / 2;
			top += t._outerHeight() + 12 + (opts.trackMouse ? 12 : 0);
			break;
		}
		tip.css({
			left: left,
			top: top,
			zIndex: (opts.zIndex != undefined ? opts.zIndex : ($.fn.window ? $.fn.window.defaults.zIndex++ : ""))
		});
		opts.onPosition.call(_1b2, left, top);
	};

	function _1b4(_1b5, e) {
		var _1b6 = $.data(_1b5, "tooltip");
		var opts = _1b6.options;
		var tip = _1b6.tip;
		if (!tip) {
			tip = $("<div tabindex=\"-1\" class=\"tooltip\">" + "<div class=\"tooltip-content\"></div>" + "<div class=\"tooltip-arrow-outer\"></div>" + "<div class=\"tooltip-arrow\"></div>" + "</div>").appendTo("body");
			_1b6.tip = tip;
			_1b7(_1b5);
		}
		tip.removeClass("tooltip-top tooltip-bottom tooltip-left tooltip-right").addClass("tooltip-" + opts.position);
		_1af(_1b5);
		_1b6.showTimer = setTimeout(function() {
			_1ae(_1b5);
			tip.show();
			opts.onShow.call(_1b5, e);
			var _1b8 = tip.children(".tooltip-arrow-outer");
			var _1b9 = tip.children(".tooltip-arrow");
			var bc = "border-" + opts.position + "-color";
			_1b8.add(_1b9).css({
				borderTopColor: "",
				borderBottomColor: "",
				borderLeftColor: "",
				borderRightColor: ""
			});
			_1b8.css(bc, tip.css(bc));
			_1b9.css(bc, tip.css("backgroundColor"));
		}, opts.showDelay);
	};

	function _1ba(_1bb, e) {
		var _1bc = $.data(_1bb, "tooltip");
		if (_1bc && _1bc.tip) {
			_1af(_1bb);
			_1bc.hideTimer = setTimeout(function() {
				_1bc.tip.hide();
				_1bc.options.onHide.call(_1bb, e);
			}, _1bc.options.hideDelay);
		}
	};

	function _1b7(_1bd, _1be) {
		var _1bf = $.data(_1bd, "tooltip");
		var opts = _1bf.options;
		if (_1be) {
			opts.content = _1be;
		}
		if (!_1bf.tip) {
			return;
		}
		var cc = typeof opts.content == "function" ? opts.content.call(_1bd) : opts.content;
		_1bf.tip.children(".tooltip-content").html(cc);
		opts.onUpdate.call(_1bd, cc);
	};

	function _1c0(_1c1) {
		var _1c2 = $.data(_1c1, "tooltip");
		if (_1c2) {
			_1af(_1c1);
			var opts = _1c2.options;
			if (_1c2.tip) {
				_1c2.tip.remove();
			}
			if (opts._title) {
				$(_1c1).attr("title", opts._title);
			}
			$.removeData(_1c1, "tooltip");
			$(_1c1).unbind(".tooltip").removeClass("tooltip-f");
			opts.onDestroy.call(_1c1);
		}
	};
	$.fn.tooltip = function(_1c3, _1c4) {
		if (typeof _1c3 == "string") {
			return $.fn.tooltip.methods[_1c3](this, _1c4);
		}
		_1c3 = _1c3 || {};
		return this.each(function() {
			var _1c5 = $.data(this, "tooltip");
			if (_1c5) {
				$.extend(_1c5.options, _1c3);
			} else {
				$.data(this, "tooltip", {
					options: $.extend({}, $.fn.tooltip.defaults, $.fn.tooltip.parseOptions(this), _1c3)
				});
				init(this);
			}
			_1ac(this);
			_1b7(this);
		});
	};
	$.fn.tooltip.methods = {
		options: function(jq) {
			return $.data(jq[0], "tooltip").options;
		},
		tip: function(jq) {
			return $.data(jq[0], "tooltip").tip;
		},
		arrow: function(jq) {
			return jq.tooltip("tip").children(".tooltip-arrow-outer,.tooltip-arrow");
		},
		show: function(jq, e) {
			return jq.each(function() {
				_1b4(this, e);
			});
		},
		hide: function(jq, e) {
			return jq.each(function() {
				_1ba(this, e);
			});
		},
		update: function(jq, _1c6) {
			return jq.each(function() {
				_1b7(this, _1c6);
			});
		},
		reposition: function(jq) {
			return jq.each(function() {
				_1ae(this);
			});
		},
		destroy: function(jq) {
			return jq.each(function() {
				_1c0(this);
			});
		}
	};
	$.fn.tooltip.parseOptions = function(_1c7) {
		var t = $(_1c7);
		var opts = $.extend({}, $.parser.parseOptions(_1c7, ["position", "showEvent", "hideEvent", "content",
		{
			deltaX: "number",
			deltaY: "number",
			showDelay: "number",
			hideDelay: "number"
		}]), {
			_title: t.attr("title")
		});
		t.attr("title", "");
		if (!opts.content) {
			opts.content = opts._title;
		}
		return opts;
	};
	$.fn.tooltip.defaults = {
		position: "bottom",
		content: null,
		trackMouse: false,
		deltaX: 0,
		deltaY: 0,
		showEvent: "mouseenter",
		hideEvent: "mouseleave",
		showDelay: 200,
		hideDelay: 100,
		onShow: function(e) {},
		onHide: function(e) {},
		onUpdate: function(_1c8) {},
		onPosition: function(left, top) {},
		onDestroy: function() {}
	};
})(jQuery);
(function($) {
	$.fn._remove = function() {
		return this.each(function() {
			$(this).remove();
			try {
				this.outerHTML = "";
			} catch (err) {}
		});
	};

	function _1c9(node) {
		node._remove();
	};

	function _1ca(_1cb, _1cc) {
		var opts = $.data(_1cb, "panel").options;
		var _1cd = $.data(_1cb, "panel").panel;
		var _1ce = _1cd.children("div.panel-header");
		var _1cf = _1cd.children("div.panel-body");
		if (_1cc) {
			if (_1cc.width) {
				opts.width = _1cc.width;
			}
			if (_1cc.height) {
				opts.height = _1cc.height;
			}
			if (_1cc.left != null) {
				opts.left = _1cc.left;
			}
			if (_1cc.top != null) {
				opts.top = _1cc.top;
			}
		}
		opts.fit ? $.extend(opts, _1cd._fit()) : _1cd._fit(false);
		_1cd.css({
			left: opts.left,
			top: opts.top
		});
		if (!isNaN(opts.width)) {
			_1cd._outerWidth(opts.width);
		} else {
			_1cd.width("auto");
		}
		_1ce.add(_1cf)._outerWidth(_1cd.width());
		if (!isNaN(opts.height)) {
			_1cd._outerHeight(opts.height);
			_1cf._outerHeight(_1cd.height() - _1ce._outerHeight());
		} else {
			_1cf.height("auto");
		}
		_1cd.css("height", "");
		opts.onResize.apply(_1cb, [opts.width, opts.height]);
		_1cd.find(">div.panel-body>div").triggerHandler("_resize");
	};

	function _1d0(_1d1, _1d2) {
		var opts = $.data(_1d1, "panel").options;
		var _1d3 = $.data(_1d1, "panel").panel;
		if (_1d2) {
			if (_1d2.left != null) {
				opts.left = _1d2.left;
			}
			if (_1d2.top != null) {
				opts.top = _1d2.top;
			}
		}
		_1d3.css({
			left: opts.left,
			top: opts.top
		});
		opts.onMove.apply(_1d1, [opts.left, opts.top]);
	};

	function _1d4(_1d5) {
		$(_1d5).addClass("panel-body");
		var _1d6 = $("<div class=\"panel\"></div>").insertBefore(_1d5);
		_1d6[0].appendChild(_1d5);
		_1d6.bind("_resize", function() {
			var opts = $.data(_1d5, "panel").options;
			if (opts.fit == true) {
				_1ca(_1d5);
			}
			return false;
		});
		return _1d6;
	};

	function _1d7(_1d8) {
		var opts = $.data(_1d8, "panel").options;
		var _1d9 = $.data(_1d8, "panel").panel;
		if (opts.tools && typeof opts.tools == "string") {
			_1d9.find(">div.panel-header>div.panel-tool .panel-tool-a").appendTo(opts.tools);
		}
		_1c9(_1d9.children("div.panel-header"));
		if (opts.title && !opts.noheader) {
			var _1da = $("<div class=\"panel-header\"><div class=\"panel-title\">" + opts.title + "</div></div>").prependTo(_1d9);
			if (opts.iconCls) {
				_1da.find(".panel-title").addClass("panel-with-icon");
				$("<div class=\"panel-icon\"></div>").addClass(opts.iconCls).appendTo(_1da);
			}
			var tool = $("<div class=\"panel-tool\"></div>").appendTo(_1da);
			tool.bind("click", function(e) {
				e.stopPropagation();
			});
			if (opts.tools) {
				if (typeof opts.tools == "string") {
					$(opts.tools).children().each(function() {
						$(this).addClass($(this).attr("iconCls")).addClass("panel-tool-a").appendTo(tool);
					});
				} else {
					for (var i = 0; i < opts.tools.length; i++) {
						var t = $("<a href=\"javascript:void(0)\"></a>").addClass(opts.tools[i].iconCls).appendTo(tool);
						if (opts.tools[i].handler) {
							t.bind("click", eval(opts.tools[i].handler));
						}
					}
				}
			}
			if (opts.collapsible) {
				$("<a class=\"panel-tool-collapse\" href=\"javascript:void(0)\"></a>").appendTo(tool).bind("click", function() {
					if (opts.collapsed == true) {
						_1f5(_1d8, true);
					} else {
						_1ea(_1d8, true);
					}
					return false;
				});
			}
			if (opts.minimizable) {
				$("<a class=\"panel-tool-min\" href=\"javascript:void(0)\"></a>").appendTo(tool).bind("click", function() {
					_1fb(_1d8);
					return false;
				});
			}
			if (opts.maximizable) {
				$("<a class=\"panel-tool-max\" href=\"javascript:void(0)\"></a>").appendTo(tool).bind("click", function() {
					if (opts.maximized == true) {
						_1fe(_1d8);
					} else {
						_1e9(_1d8);
					}
					return false;
				});
			}
			if (opts.closable) {
				$("<a class=\"panel-tool-close\" href=\"javascript:void(0)\"></a>").appendTo(tool).bind("click", function() {
					_1db(_1d8);
					return false;
				});
			}
			_1d9.children("div.panel-body").removeClass("panel-body-noheader");
		} else {
			_1d9.children("div.panel-body").addClass("panel-body-noheader");
		}
	};

	function _1dc(_1dd) {
		var _1de = $.data(_1dd, "panel");
		var opts = _1de.options;
		if (opts.href) {
			if (!_1de.isLoaded || !opts.cache) {
				_1de.isLoaded = false;
				_1df(_1dd);
				if (opts.loadingMessage) {
					$(_1dd).html($("<div class=\"panel-loading\"></div>").html(opts.loadingMessage));
				}
				$.ajax({
					url: opts.href,
					cache: false,
					dataType: "html",
					success: function(data) {
						_1e0(opts.extractor.call(_1dd, data));
						opts.onLoad.apply(_1dd, arguments);
						_1de.isLoaded = true;
					}
				});
			}
		} else {
			if (opts.content) {
				if (!_1de.isLoaded) {
					_1df(_1dd);
					_1e0(opts.content);
					_1de.isLoaded = true;
				}
			}
		}

		function _1e0(_1e1) {
			$(_1dd).html(_1e1);
			if ($.parser) {
				$.parser.parse($(_1dd));
			}
		};
	};

	function _1df(_1e2) {
		var t = $(_1e2);
		t.find(".combo-f").each(function() {
			$(this).combo("destroy");
		});
		t.find(".m-btn").each(function() {
			$(this).menubutton("destroy");
		});
		t.find(".s-btn").each(function() {
			$(this).splitbutton("destroy");
		});
		t.find(".tooltip-f").tooltip("destroy");
	};

	function _1e3(_1e4) {
		$(_1e4).find("div.panel:visible,div.accordion:visible,div.tabs-container:visible,div.layout:visible").each(function() {
			$(this).triggerHandler("_resize", [true]);
		});
	};

	function _1e5(_1e6, _1e7) {
		var opts = $.data(_1e6, "panel").options;
		var _1e8 = $.data(_1e6, "panel").panel;
		if (_1e7 != true) {
			if (opts.onBeforeOpen.call(_1e6) == false) {
				return;
			}
		}
		_1e8.show();
		opts.closed = false;
		opts.minimized = false;
		var tool = _1e8.children("div.panel-header").find("a.panel-tool-restore");
		if (tool.length) {
			opts.maximized = true;
		}
		opts.onOpen.call(_1e6);
		if (opts.maximized == true) {
			opts.maximized = false;
			_1e9(_1e6);
		}
		if (opts.collapsed == true) {
			opts.collapsed = false;
			_1ea(_1e6);
		}
		if (!opts.collapsed) {
			_1dc(_1e6);
			_1e3(_1e6);
		}
	};

	function _1db(_1eb, _1ec) {
		var opts = $.data(_1eb, "panel").options;
		var _1ed = $.data(_1eb, "panel").panel;
		if (_1ec != true) {
			if (opts.onBeforeClose.call(_1eb) == false) {
				return;
			}
		}
		_1ed._fit(false);
		_1ed.hide();
		opts.closed = true;
		opts.onClose.call(_1eb);
	};

	function _1ee(_1ef, _1f0) {
		var opts = $.data(_1ef, "panel").options;
		var _1f1 = $.data(_1ef, "panel").panel;
		if (_1f0 != true) {
			if (opts.onBeforeDestroy.call(_1ef) == false) {
				return;
			}
		}
		_1df(_1ef);
		_1c9(_1f1);
		opts.onDestroy.call(_1ef);
	};

	function _1ea(_1f2, _1f3) {
		var opts = $.data(_1f2, "panel").options;
		var _1f4 = $.data(_1f2, "panel").panel;
		var body = _1f4.children("div.panel-body");
		var tool = _1f4.children("div.panel-header").find("a.panel-tool-collapse");
		if (opts.collapsed == true) {
			return;
		}
		body.stop(true, true);
		if (opts.onBeforeCollapse.call(_1f2) == false) {
			return;
		}
		tool.addClass("panel-tool-expand");
		if (_1f3 == true) {
			body.slideUp("normal", function() {
				opts.collapsed = true;
				opts.onCollapse.call(_1f2);
			});
		} else {
			body.hide();
			opts.collapsed = true;
			opts.onCollapse.call(_1f2);
		}
	};

	function _1f5(_1f6, _1f7) {
		var opts = $.data(_1f6, "panel").options;
		var _1f8 = $.data(_1f6, "panel").panel;
		var body = _1f8.children("div.panel-body");
		var tool = _1f8.children("div.panel-header").find("a.panel-tool-collapse");
		if (opts.collapsed == false) {
			return;
		}
		body.stop(true, true);
		if (opts.onBeforeExpand.call(_1f6) == false) {
			return;
		}
		tool.removeClass("panel-tool-expand");
		if (_1f7 == true) {
			body.slideDown("normal", function() {
				opts.collapsed = false;
				opts.onExpand.call(_1f6);
				_1dc(_1f6);
				_1e3(_1f6);
			});
		} else {
			body.show();
			opts.collapsed = false;
			opts.onExpand.call(_1f6);
			_1dc(_1f6);
			_1e3(_1f6);
		}
	};

	function _1e9(_1f9) {
		var opts = $.data(_1f9, "panel").options;
		var _1fa = $.data(_1f9, "panel").panel;
		var tool = _1fa.children("div.panel-header").find("a.panel-tool-max");
		if (opts.maximized == true) {
			return;
		}
		tool.addClass("panel-tool-restore");
		if (!$.data(_1f9, "panel").original) {
			$.data(_1f9, "panel").original = {
				width: opts.width,
				height: opts.height,
				left: opts.left,
				top: opts.top,
				fit: opts.fit
			};
		}
		opts.left = 0;
		opts.top = 0;
		opts.fit = true;
		_1ca(_1f9);
		opts.minimized = false;
		opts.maximized = true;
		opts.onMaximize.call(_1f9);
	};

	function _1fb(_1fc) {
		var opts = $.data(_1fc, "panel").options;
		var _1fd = $.data(_1fc, "panel").panel;
		_1fd._fit(false);
		_1fd.hide();
		opts.minimized = true;
		opts.maximized = false;
		opts.onMinimize.call(_1fc);
	};

	function _1fe(_1ff) {
		var opts = $.data(_1ff, "panel").options;
		var _200 = $.data(_1ff, "panel").panel;
		var tool = _200.children("div.panel-header").find("a.panel-tool-max");
		if (opts.maximized == false) {
			return;
		}
		_200.show();
		tool.removeClass("panel-tool-restore");
		$.extend(opts, $.data(_1ff, "panel").original);
		_1ca(_1ff);
		opts.minimized = false;
		opts.maximized = false;
		$.data(_1ff, "panel").original = null;
		opts.onRestore.call(_1ff);
	};

	function _201(_202) {
		var opts = $.data(_202, "panel").options;
		var _203 = $.data(_202, "panel").panel;
		var _204 = $(_202).panel("header");
		var body = $(_202).panel("body");
		_203.css(opts.style);
		_203.addClass(opts.cls);
		if (opts.border) {
			_204.removeClass("panel-header-noborder");
			body.removeClass("panel-body-noborder");
		} else {
			_204.addClass("panel-header-noborder");
			body.addClass("panel-body-noborder");
		}
		_204.addClass(opts.headerCls);
		body.addClass(opts.bodyCls);
		if (opts.id) {
			$(_202).attr("id", opts.id);
		} else {
			$(_202).attr("id", "");
		}
	};

	function _205(_206, _207) {
		$.data(_206, "panel").options.title = _207;
		$(_206).panel("header").find("div.panel-title").html(_207);
	};
	var TO = false;
	var _208 = true;
	$(window).unbind(".panel").bind("resize.panel", function() {
		if (!_208) {
			return;
		}
		if (TO !== false) {
			clearTimeout(TO);
		}
		TO = setTimeout(function() {
			_208 = false;
			var _209 = $("body.layout");
			if (_209.length) {
				_209.layout("resize");
			} else {
				$("body").children("div.panel,div.accordion,div.tabs-container,div.layout").triggerHandler("_resize");
			}
			_208 = true;
			TO = false;
		}, 200);
	});
	$.fn.panel = function(_20a, _20b) {
		if (typeof _20a == "string") {
			return $.fn.panel.methods[_20a](this, _20b);
		}
		_20a = _20a || {};
		return this.each(function() {
			var _20c = $.data(this, "panel");
			var opts;
			if (_20c) {
				opts = $.extend(_20c.options, _20a);
				_20c.isLoaded = false;
			} else {
				opts = $.extend({}, $.fn.panel.defaults, $.fn.panel.parseOptions(this), _20a);
				$(this).attr("title", "");
				_20c = $.data(this, "panel", {
					options: opts,
					panel: _1d4(this),
					isLoaded: false
				});
			}
			_1d7(this);
			_201(this);
			if (opts.doSize == true) {
				_20c.panel.css("display", "block");
				_1ca(this);
			}
			if (opts.closed == true || opts.minimized == true) {
				_20c.panel.hide();
			} else {
				_1e5(this);
			}
		});
	};
	$.fn.panel.methods = {
		options: function(jq) {
			return $.data(jq[0], "panel").options;
		},
		panel: function(jq) {
			return $.data(jq[0], "panel").panel;
		},
		header: function(jq) {
			return $.data(jq[0], "panel").panel.find(">div.panel-header");
		},
		body: function(jq) {
			return $.data(jq[0], "panel").panel.find(">div.panel-body");
		},
		setTitle: function(jq, _20d) {
			return jq.each(function() {
				_205(this, _20d);
			});
		},
		open: function(jq, _20e) {
			return jq.each(function() {
				_1e5(this, _20e);
			});
		},
		close: function(jq, _20f) {
			return jq.each(function() {
				_1db(this, _20f);
			});
		},
		destroy: function(jq, _210) {
			return jq.each(function() {
				_1ee(this, _210);
			});
		},
		refresh: function(jq, href) {
			return jq.each(function() {
				$.data(this, "panel").isLoaded = false;
				if (href) {
					$.data(this, "panel").options.href = href;
				}
				_1dc(this);
			});
		},
		resize: function(jq, _211) {
			return jq.each(function() {
				_1ca(this, _211);
			});
		},
		move: function(jq, _212) {
			return jq.each(function() {
				_1d0(this, _212);
			});
		},
		maximize: function(jq) {
			return jq.each(function() {
				_1e9(this);
			});
		},
		minimize: function(jq) {
			return jq.each(function() {
				_1fb(this);
			});
		},
		restore: function(jq) {
			return jq.each(function() {
				_1fe(this);
			});
		},
		collapse: function(jq, _213) {
			return jq.each(function() {
				_1ea(this, _213);
			});
		},
		expand: function(jq, _214) {
			return jq.each(function() {
				_1f5(this, _214);
			});
		}
	};
	$.fn.panel.parseOptions = function(_215) {
		var t = $(_215);
		return $.extend({}, $.parser.parseOptions(_215, ["id", "width", "height", "left", "top", "title", "iconCls", "cls", "headerCls", "bodyCls", "tools", "href",
		{
			cache: "boolean",
			fit: "boolean",
			border: "boolean",
			noheader: "boolean"
		}, {
			collapsible: "boolean",
			minimizable: "boolean",
			maximizable: "boolean"
		}, {
			closable: "boolean",
			collapsed: "boolean",
			minimized: "boolean",
			maximized: "boolean",
			closed: "boolean"
		}]), {
			loadingMessage: (t.attr("loadingMessage") != undefined ? t.attr("loadingMessage") : undefined)
		});
	};
	$.fn.panel.defaults = {
		id: null,
		title: null,
		iconCls: null,
		width: "auto",
		height: "auto",
		left: null,
		top: null,
		cls: null,
		headerCls: null,
		bodyCls: null,
		style: {},
		href: null,
		cache: true,
		fit: false,
		border: true,
		doSize: true,
		noheader: false,
		content: null,
		collapsible: false,
		minimizable: false,
		maximizable: false,
		closable: false,
		collapsed: false,
		minimized: false,
		maximized: false,
		closed: false,
		tools: null,
		href: null,
		loadingMessage: "Loading...",
		extractor: function(data) {
			var _216 = /<body[^>]*>((.|[\n\r])*)<\/body>/im;
			var _217 = _216.exec(data);
			if (_217) {
				return _217[1];
			} else {
				return data;
			}
		},
		onLoad: function() {},
		onBeforeOpen: function() {},
		onOpen: function() {},
		onBeforeClose: function() {},
		onClose: function() {},
		onBeforeDestroy: function() {},
		onDestroy: function() {},
		onResize: function(_218, _219) {},
		onMove: function(left, top) {},
		onMaximize: function() {},
		onRestore: function() {},
		onMinimize: function() {},
		onBeforeCollapse: function() {},
		onBeforeExpand: function() {},
		onCollapse: function() {},
		onExpand: function() {}
	};
})(jQuery);
(function($) {
	function _21a(_21b, _21c) {
		var opts = $.data(_21b, "window").options;
		if (_21c) {
			if (_21c.width) {
				opts.width = _21c.width;
			}
			if (_21c.height) {
				opts.height = _21c.height;
			}
			if (_21c.left != null) {
				opts.left = _21c.left;
			}
			if (_21c.top != null) {
				opts.top = _21c.top;
			}
		}
		$(_21b).panel("resize", opts);
	};

	function _21d(_21e, _21f) {
		var _220 = $.data(_21e, "window");
		if (_21f) {
			if (_21f.left != null) {
				_220.options.left = _21f.left;
			}
			if (_21f.top != null) {
				_220.options.top = _21f.top;
			}
		}
		$(_21e).panel("move", _220.options);
		if (_220.shadow) {
			_220.shadow.css({
				left: _220.options.left,
				top: _220.options.top
			});
		}
	};

	function _221(_222, _223) {
		var _224 = $.data(_222, "window");
		var opts = _224.options;
		var _225 = opts.width;
		if (isNaN(_225)) {
			_225 = _224.window._outerWidth();
		}
		if (opts.inline) {
			var _226 = _224.window.parent();
			opts.left = (_226.width() - _225) / 2 + _226.scrollLeft();
		} else {
			opts.left = ($(window)._outerWidth() - _225) / 2 + $(document).scrollLeft();
		}
		if (_223) {
			_21d(_222);
		}
	};

	function _227(_228, _229) {
		var _22a = $.data(_228, "window");
		var opts = _22a.options;
		var _22b = opts.height;
		if (isNaN(_22b)) {
			_22b = _22a.window._outerHeight();
		}
		if (opts.inline) {
			var _22c = _22a.window.parent();
			opts.top = (_22c.height() - _22b) / 2 + _22c.scrollTop();
		} else {
			opts.top = ($(window)._outerHeight() - _22b) / 2 + $(document).scrollTop();
		}
		if (_229) {
			_21d(_228);
		}
	};

	function _22d(_22e) {
		var _22f = $.data(_22e, "window");
		var win = $(_22e).panel($.extend({}, _22f.options, {
			border: false,
			doSize: true,
			closed: true,
			cls: "window",
			headerCls: "window-header",
			bodyCls: "window-body " + (_22f.options.noheader ? "window-body-noheader" : ""),
			onBeforeDestroy: function() {
				if (_22f.options.onBeforeDestroy.call(_22e) == false) {
					return false;
				}
				if (_22f.shadow) {
					_22f.shadow.remove();
				}
				if (_22f.mask) {
					_22f.mask.remove();
				}
			},
			onClose: function() {
				if (_22f.shadow) {
					_22f.shadow.hide();
				}
				if (_22f.mask) {
					_22f.mask.hide();
				}
				_22f.options.onClose.call(_22e);
			},
			onOpen: function() {
				if (_22f.mask) {
					_22f.mask.css({
						display: "block",
						zIndex: $.fn.window.defaults.zIndex++
					});
				}
				if (_22f.shadow) {
					_22f.shadow.css({
						display: "block",
						zIndex: $.fn.window.defaults.zIndex++,
						left: _22f.options.left,
						top: _22f.options.top,
						width: _22f.window._outerWidth(),
						height: _22f.window._outerHeight()
					});
				}
				_22f.window.css("z-index", $.fn.window.defaults.zIndex++);
				_22f.options.onOpen.call(_22e);
			},
			onResize: function(_230, _231) {
				var opts = $(this).panel("options");
				$.extend(_22f.options, {
					width: opts.width,
					height: opts.height,
					left: opts.left,
					top: opts.top
				});
				if (_22f.shadow) {
					_22f.shadow.css({
						left: _22f.options.left,
						top: _22f.options.top,
						width: _22f.window._outerWidth(),
						height: _22f.window._outerHeight()
					});
				}
				_22f.options.onResize.call(_22e, _230, _231);
			},
			onMinimize: function() {
				if (_22f.shadow) {
					_22f.shadow.hide();
				}
				if (_22f.mask) {
					_22f.mask.hide();
				}
				_22f.options.onMinimize.call(_22e);
			},
			onBeforeCollapse: function() {
				if (_22f.options.onBeforeCollapse.call(_22e) == false) {
					return false;
				}
				if (_22f.shadow) {
					_22f.shadow.hide();
				}
			},
			onExpand: function() {
				if (_22f.shadow) {
					_22f.shadow.show();
				}
				_22f.options.onExpand.call(_22e);
			}
		}));
		_22f.window = win.panel("panel");
		if (_22f.mask) {
			_22f.mask.remove();
		}
		if (_22f.options.modal == true) {
			_22f.mask = $("<div class=\"window-mask\"></div>").insertAfter(_22f.window);
			_22f.mask.css({
				width: (_22f.options.inline ? _22f.mask.parent().width() : _232().width),
				height: (_22f.options.inline ? _22f.mask.parent().height() : _232().height),
				display: "none"
			});
		}
		if (_22f.shadow) {
			_22f.shadow.remove();
		}
		if (_22f.options.shadow == true) {
			_22f.shadow = $("<div class=\"window-shadow\"></div>").insertAfter(_22f.window);
			_22f.shadow.css({
				display: "none"
			});
		}
		if (_22f.options.left == null) {
			_221(_22e);
		}
		if (_22f.options.top == null) {
			_227(_22e);
		}
		_21d(_22e);
		if (_22f.options.closed == false) {
			win.window("open");
		}
	};

	function _233(_234) {
		var _235 = $.data(_234, "window");
		_235.window.draggable({
			handle: ">div.panel-header>div.panel-title",
			disabled: _235.options.draggable == false,
			onStartDrag: function(e) {
				if (_235.mask) {
					_235.mask.css("z-index", $.fn.window.defaults.zIndex++);
				}
				if (_235.shadow) {
					_235.shadow.css("z-index", $.fn.window.defaults.zIndex++);
				}
				_235.window.css("z-index", $.fn.window.defaults.zIndex++);
				if (!_235.proxy) {
					_235.proxy = $("<div class=\"window-proxy\"></div>").insertAfter(_235.window);
				}
				_235.proxy.css({
					display: "none",
					zIndex: $.fn.window.defaults.zIndex++,
					left: e.data.left,
					top: e.data.top
				});
				_235.proxy._outerWidth(_235.window._outerWidth());
				_235.proxy._outerHeight(_235.window._outerHeight());
				setTimeout(function() {
					if (_235.proxy) {
						_235.proxy.show();
					}
				}, 500);
			},
			onDrag: function(e) {
				_235.proxy.css({
					display: "block",
					left: e.data.left,
					top: e.data.top
				});
				return false;
			},
			onStopDrag: function(e) {
				_235.options.left = e.data.left;
				_235.options.top = e.data.top;
				$(_234).window("move");
				_235.proxy.remove();
				_235.proxy = null;
			}
		});
		_235.window.resizable({
			disabled: _235.options.resizable == false,
			onStartResize: function(e) {
				_235.pmask = $("<div class=\"window-proxy-mask\"></div>").insertAfter(_235.window);
				_235.pmask.css({
					zIndex: $.fn.window.defaults.zIndex++,
					left: e.data.left,
					top: e.data.top,
					width: _235.window._outerWidth(),
					height: _235.window._outerHeight()
				});
				if (!_235.proxy) {
					_235.proxy = $("<div class=\"window-proxy\"></div>").insertAfter(_235.window);
				}
				_235.proxy.css({
					zIndex: $.fn.window.defaults.zIndex++,
					left: e.data.left,
					top: e.data.top
				});
				_235.proxy._outerWidth(e.data.width);
				_235.proxy._outerHeight(e.data.height);
			},
			onResize: function(e) {
				_235.proxy.css({
					left: e.data.left,
					top: e.data.top
				});
				_235.proxy._outerWidth(e.data.width);
				_235.proxy._outerHeight(e.data.height);
				return false;
			},
			onStopResize: function(e) {
				$.extend(_235.options, {
					left: e.data.left,
					top: e.data.top,
					width: e.data.width,
					height: e.data.height
				});
				_21a(_234);
				_235.pmask.remove();
				_235.pmask = null;
				_235.proxy.remove();
				_235.proxy = null;
			}
		});
	};

	function _232() {
		if (document.compatMode == "BackCompat") {
			return {
				width: Math.max(document.body.scrollWidth, document.body.clientWidth),
				height: Math.max(document.body.scrollHeight, document.body.clientHeight)
			};
		} else {
			return {
				width: Math.max(document.documentElement.scrollWidth, document.documentElement.clientWidth),
				height: Math.max(document.documentElement.scrollHeight, document.documentElement.clientHeight)
			};
		}
	};
	$(window).resize(function() {
		$("body>div.window-mask").css({
			width: $(window)._outerWidth(),
			height: $(window)._outerHeight()
		});
		setTimeout(function() {
			$("body>div.window-mask").css({
				width: _232().width,
				height: _232().height
			});
		}, 50);
	});
	$.fn.window = function(_236, _237) {
		if (typeof _236 == "string") {
			var _238 = $.fn.window.methods[_236];
			if (_238) {
				return _238(this, _237);
			} else {
				return this.panel(_236, _237);
			}
		}
		_236 = _236 || {};
		return this.each(function() {
			var _239 = $.data(this, "window");
			if (_239) {
				$.extend(_239.options, _236);
			} else {
				_239 = $.data(this, "window", {
					options: $.extend({}, $.fn.window.defaults, $.fn.window.parseOptions(this), _236)
				});
				if (!_239.options.inline) {
					document.body.appendChild(this);
				}
			}
			_22d(this);
			_233(this);
		});
	};
	$.fn.window.methods = {
		options: function(jq) {
			var _23a = jq.panel("options");
			var _23b = $.data(jq[0], "window").options;
			return $.extend(_23b, {
				closed: _23a.closed,
				collapsed: _23a.collapsed,
				minimized: _23a.minimized,
				maximized: _23a.maximized
			});
		},
		window: function(jq) {
			return $.data(jq[0], "window").window;
		},
		resize: function(jq, _23c) {
			return jq.each(function() {
				_21a(this, _23c);
			});
		},
		move: function(jq, _23d) {
			return jq.each(function() {
				_21d(this, _23d);
			});
		},
		hcenter: function(jq) {
			return jq.each(function() {
				_221(this, true);
			});
		},
		vcenter: function(jq) {
			return jq.each(function() {
				_227(this, true);
			});
		},
		center: function(jq) {
			return jq.each(function() {
				_221(this);
				_227(this);
				_21d(this);
			});
		}
	};
	$.fn.window.parseOptions = function(_23e) {
		return $.extend({}, $.fn.panel.parseOptions(_23e), $.parser.parseOptions(_23e, [{
			draggable: "boolean",
			resizable: "boolean",
			shadow: "boolean",
			modal: "boolean",
			inline: "boolean"
		}]));
	};
	$.fn.window.defaults = $.extend({}, $.fn.panel.defaults, {
		zIndex: 9000,
		draggable: true,
		resizable: true,
		shadow: true,
		modal: false,
		inline: false,
		title: "New Window",
		collapsible: true,
		minimizable: true,
		maximizable: true,
		closable: true,
		closed: false
	});
})(jQuery);
(function($) {
	function _23f(_240) {
		var cp = document.createElement("div");
		while (_240.firstChild) {
			cp.appendChild(_240.firstChild);
		}
		_240.appendChild(cp);
		var _241 = $(cp);
		_241.attr("style", $(_240).attr("style"));
		$(_240).removeAttr("style").css("overflow", "hidden");
		_241.panel({
			border: false,
			doSize: false,
			bodyCls: "dialog-content"
		});
		return _241;
	};

	function _242(_243) {
		var opts = $.data(_243, "dialog").options;
		var _244 = $.data(_243, "dialog").contentPanel;
		if (opts.toolbar) {
			if (typeof opts.toolbar == "string") {
				$(opts.toolbar).addClass("dialog-toolbar").prependTo(_243);
				$(opts.toolbar).show();
			} else {
				$(_243).find("div.dialog-toolbar").remove();
				var _245 = $("<div class=\"dialog-toolbar\"><table cellspacing=\"0\" cellpadding=\"0\"><tr></tr></table></div>").prependTo(_243);
				var tr = _245.find("tr");
				for (var i = 0; i < opts.toolbar.length; i++) {
					var btn = opts.toolbar[i];
					if (btn == "-") {
						$("<td><div class=\"dialog-tool-separator\"></div></td>").appendTo(tr);
					} else {
						var td = $("<td></td>").appendTo(tr);
						var tool = $("<a href=\"javascript:void(0)\"></a>").appendTo(td);
						tool[0].onclick = eval(btn.handler ||
						function() {});
						tool.linkbutton($.extend({}, btn, {
							plain: true
						}));
					}
				}
			}
		} else {
			$(_243).find("div.dialog-toolbar").remove();
		}
		if (opts.buttons) {
			if (typeof opts.buttons == "string") {
				$(opts.buttons).addClass("dialog-button").appendTo(_243);
				$(opts.buttons).show();
			} else {
				$(_243).find("div.dialog-button").remove();
				var _246 = $("<div class=\"dialog-button\"></div>").appendTo(_243);
				for (var i = 0; i < opts.buttons.length; i++) {
					var p = opts.buttons[i];
					var _247 = $("<a href=\"javascript:void(0)\"></a>").appendTo(_246);
					if (p.handler) {
						_247[0].onclick = p.handler;
					}
					_247.linkbutton(p);
				}
			}
		} else {
			$(_243).find("div.dialog-button").remove();
		}
		var _248 = opts.href;
		var _249 = opts.content;
		opts.href = null;
		opts.content = null;
		_244.panel({
			closed: opts.closed,
			cache: opts.cache,
			href: _248,
			content: _249,
			onLoad: function() {
				if (opts.height == "auto") {
					$(_243).window("resize");
				}
				opts.onLoad.apply(_243, arguments);
			}
		});
		$(_243).window($.extend({}, opts, {
			onOpen: function() {
				if (_244.panel("options").closed) {
					_244.panel("open");
				}
				if (opts.onOpen) {
					opts.onOpen.call(_243);
				}
			},
			onResize: function(_24a, _24b) {
				var _24c = $(_243);
				_244.panel("panel").show();
				_244.panel("resize", {
					width: _24c.width(),
					height: (_24b == "auto") ? "auto" : _24c.height() - _24c.children("div.dialog-toolbar")._outerHeight() - _24c.children("div.dialog-button")._outerHeight()
				});
				if (opts.onResize) {
					opts.onResize.call(_243, _24a, _24b);
				}
			}
		}));
		opts.href = _248;
		opts.content = _249;
	};

	function _24d(_24e, href) {
		var _24f = $.data(_24e, "dialog").contentPanel;
		_24f.panel("refresh", href);
	};
	$.fn.dialog = function(_250, _251) {
		if (typeof _250 == "string") {
			var _252 = $.fn.dialog.methods[_250];
			if (_252) {
				return _252(this, _251);
			} else {
				return this.window(_250, _251);
			}
		}
		_250 = _250 || {};
		return this.each(function() {
			var _253 = $.data(this, "dialog");
			if (_253) {
				$.extend(_253.options, _250);
			} else {
				$.data(this, "dialog", {
					options: $.extend({}, $.fn.dialog.defaults, $.fn.dialog.parseOptions(this), _250),
					contentPanel: _23f(this)
				});
			}
			_242(this);
		});
	};
	$.fn.dialog.methods = {
		options: function(jq) {
			var _254 = $.data(jq[0], "dialog").options;
			var _255 = jq.panel("options");
			$.extend(_254, {
				closed: _255.closed,
				collapsed: _255.collapsed,
				minimized: _255.minimized,
				maximized: _255.maximized
			});
			var _256 = $.data(jq[0], "dialog").contentPanel;
			return _254;
		},
		dialog: function(jq) {
			return jq.window("window");
		},
		refresh: function(jq, href) {
			return jq.each(function() {
				_24d(this, href);
			});
		}
	};
	$.fn.dialog.parseOptions = function(_257) {
		return $.extend({}, $.fn.window.parseOptions(_257), $.parser.parseOptions(_257, ["toolbar", "buttons"]));
	};
	$.fn.dialog.defaults = $.extend({}, $.fn.window.defaults, {
		title: "New Dialog",
		collapsible: false,
		minimizable: false,
		maximizable: false,
		resizable: false,
		toolbar: null,
		buttons: null
	});
})(jQuery);
(function($) {
	function show(el, type, _258, _259) {
		var win = $(el).window("window");
		if (!win) {
			return;
		}
		switch (type) {
		case null:
			win.show();
			break;
		case "slide":
			win.slideDown(_258);
			break;
		case "fade":
			win.fadeIn(_258);
			break;
		case "show":
			win.show(_258);
			break;
		}
		var _25a = null;
		if (_259 > 0) {
			_25a = setTimeout(function() {
				hide(el, type, _258);
			}, _259);
		}
		win.hover(function() {
			if (_25a) {
				clearTimeout(_25a);
			}
		}, function() {
			if (_259 > 0) {
				_25a = setTimeout(function() {
					hide(el, type, _258);
				}, _259);
			}
		});
	};

	function hide(el, type, _25b) {
		if (el.locked == true) {
			return;
		}
		el.locked = true;
		var win = $(el).window("window");
		if (!win) {
			return;
		}
		switch (type) {
		case null:
			win.hide();
			break;
		case "slide":
			win.slideUp(_25b);
			break;
		case "fade":
			win.fadeOut(_25b);
			break;
		case "show":
			win.hide(_25b);
			break;
		}
		setTimeout(function() {
			$(el).window("destroy");
		}, _25b);
	};

	function _25c(_25d) {
		var opts = $.extend({}, $.fn.window.defaults, {
			collapsible: false,
			minimizable: false,
			maximizable: false,
			shadow: false,
			draggable: false,
			resizable: false,
			closed: true,
			style: {
				left: "",
				top: "",
				right: 0,
				zIndex: $.fn.window.defaults.zIndex++,
				bottom: -document.body.scrollTop - document.documentElement.scrollTop
			},
			onBeforeOpen: function() {
				show(this, opts.showType, opts.showSpeed, opts.timeout);
				return false;
			},
			onBeforeClose: function() {
				hide(this, opts.showType, opts.showSpeed);
				return false;
			}
		}, {
			title: "",
			width: 300,
			height: 150,
			showType: "slide",
			showSpeed: 600,
			msg: "",
			timeout: 4000
		}, _25d);
		opts.style.zIndex = $.fn.window.defaults.zIndex++;
		var win = $("<div class=\"messager-body\"></div>").html(opts.msg).appendTo("body");
		win.window(opts);
		win.window("window").css(opts.style);
		win.window("open");
		return win;
	};

	function _25e(_25f, _260, _261) {
		var win = $("<div class=\"messager-body\"></div>").appendTo("body");
		win.append(_260);
		if (_261) {
			var tb = $("<div class=\"messager-button\"></div>").appendTo(win);
			for (var _262 in _261) {
				$("<a></a>").attr("href", "javascript:void(0)").text(_262).css("margin-left", 10).bind("click", eval(_261[_262])).appendTo(tb).linkbutton();
			}
		}
		win.window({
			title: _25f,
			noheader: (_25f ? false : true),
			width: 400,
			height: "auto",
			modal: true,
			collapsible: false,
			minimizable: false,
			maximizable: false,
			resizable: false,
			onClose: function() {
				setTimeout(function() {
					win.window("destroy");
				}, 100);
			}
		});
		win.window("window").addClass("messager-window");
		win.children("div.messager-button").children("a:first").focus();
		return win;
	};
	$.messager = {
		show: function(_263) {
			return _25c(_263);
		},
		alert: function(_264, msg, icon, fn) {
			var _265 = "<div>" + msg + "</div>";
			switch (icon) {
			case "error":
				_265 = "<div class=\"messager-icon messager-error\"></div>" + _265;
				break;
			case "info":
				_265 = "<div class=\"messager-icon messager-info\"></div>" + _265;
				break;
			case "question":
				_265 = "<div class=\"messager-icon messager-question\"></div>" + _265;
				break;
			case "warning":
				_265 = "<div class=\"messager-icon messager-warning\"></div>" + _265;
				break;
			}
			_265 += "<div style=\"clear:both;\"/>";
			var _266 = {};
			_266[$.messager.defaults.ok] = function() {
				win.window("close");
				if (fn) {
					fn();
					return false;
				}
			};
			var win = _25e(_264, _265, _266);
			return win;
		},
		confirm: function(_267, msg, fn) {
			var _268 = "<div class=\"messager-icon messager-question\"></div>" + "<div>" + msg + "</div>" + "<div style=\"clear:both;\"/>";
			var _269 = {};
			_269[$.messager.defaults.ok] = function() {
				win.window("close");
				if (fn) {
					fn(true);
					return false;
				}
			};
			_269[$.messager.defaults.cancel] = function() {
				win.window("close");
				if (fn) {
					fn(false);
					return false;
				}
			};
			var win = _25e(_267, _268, _269);
			return win;
		},
		prompt: function(_26a, msg, fn) {
			var _26b = "<div class=\"messager-icon messager-question\"></div>" + "<div>" + msg + "</div>" + "<br/>" + "<div style=\"clear:both;\"/>" + "<div><input class=\"messager-input\" type=\"text\"/></div>";
			var _26c = {};
			_26c[$.messager.defaults.ok] = function() {
				win.window("close");
				if (fn) {
					fn($(".messager-input", win).val());
					return false;
				}
			};
			_26c[$.messager.defaults.cancel] = function() {
				win.window("close");
				if (fn) {
					fn();
					return false;
				}
			};
			var win = _25e(_26a, _26b, _26c);
			win.children("input.messager-input").focus();
			return win;
		},
		progress: function(_26d) {
			var _26e = {
				bar: function() {
					return $("body>div.messager-window").find("div.messager-p-bar");
				},
				close: function() {
					var win = $("body>div.messager-window>div.messager-body:has(div.messager-progress)");
					if (win.length) {
						win.window("close");
					}
				}
			};
			if (typeof _26d == "string") {
				var _26f = _26e[_26d];
				return _26f();
			}
			var opts = $.extend({
				title: "",
				msg: "",
				text: undefined,
				interval: 300
			}, _26d || {});
			var _270 = "<div class=\"messager-progress\"><div class=\"messager-p-msg\"></div><div class=\"messager-p-bar\"></div></div>";
			var win = _25e(opts.title, _270, null);
			win.find("div.messager-p-msg").html(opts.msg);
			var bar = win.find("div.messager-p-bar");
			bar.progressbar({
				text: opts.text
			});
			win.window({
				closable: false,
				onClose: function() {
					if (this.timer) {
						clearInterval(this.timer);
					}
					$(this).window("destroy");
				}
			});
			if (opts.interval) {
				win[0].timer = setInterval(function() {
					var v = bar.progressbar("getValue");
					v += 10;
					if (v > 100) {
						v = 0;
					}
					bar.progressbar("setValue", v);
				}, opts.interval);
			}
			return win;
		}
	};
	$.messager.defaults = {
		ok: "Ok",
		cancel: "Cancel"
	};
})(jQuery);

(function($) {
	function _2bb(_2bc) {
		var opts = $.data(_2bc, "tabs").options;
		if (opts.tabPosition == "left" || opts.tabPosition == "right") {
			return;
		}
		var _2bd = $(_2bc).children("div.tabs-header");
		var tool = _2bd.children("div.tabs-tool");
		var _2be = _2bd.children("div.tabs-scroller-left");
		var _2bf = _2bd.children("div.tabs-scroller-right");
		var wrap = _2bd.children("div.tabs-wrap");
		tool._outerHeight(_2bd.outerHeight() - (opts.plain ? 2 : 0));
		var _2c0 = 0;
		$("ul.tabs li", _2bd).each(function() {
			_2c0 += $(this).outerWidth(true);
		});
		var _2c1 = _2bd.width() - tool._outerWidth();
		if (_2c0 > _2c1) {
			_2be.show();
			_2bf.show();
			if (opts.toolPosition == "left") {
				tool.css({
					left: _2be.outerWidth(),
					right: ""
				});
				wrap.css({
					marginLeft: _2be.outerWidth() + tool._outerWidth(),
					marginRight: _2bf._outerWidth(),
					width: _2c1 - _2be.outerWidth() - _2bf.outerWidth()
				});
			} else {
				tool.css({
					left: "",
					right: _2bf.outerWidth()
				});
				wrap.css({
					marginLeft: _2be.outerWidth(),
					marginRight: _2bf.outerWidth() + tool._outerWidth(),
					width: _2c1 - _2be.outerWidth() - _2bf.outerWidth()
				});
			}
		} else {
			_2be.hide();
			_2bf.hide();
			if (opts.toolPosition == "left") {
				tool.css({
					left: 0,
					right: ""
				});
				wrap.css({
					marginLeft: tool._outerWidth(),
					marginRight: 0,
					width: _2c1
				});
			} else {
				tool.css({
					left: "",
					right: 0
				});
				wrap.css({
					marginLeft: 0,
					marginRight: tool._outerWidth(),
					width: _2c1
				});
			}
		}
	};

	function _2c2(_2c3) {
		var opts = $.data(_2c3, "tabs").options;
		var _2c4 = $(_2c3).children("div.tabs-header");
		if (opts.tools) {
			if (typeof opts.tools == "string") {
				$(opts.tools).addClass("tabs-tool").appendTo(_2c4);
				$(opts.tools).show();
			} else {
				_2c4.children("div.tabs-tool").remove();
				var _2c5 = $("<div class=\"tabs-tool\"></div>").appendTo(_2c4);
				for (var i = 0; i < opts.tools.length; i++) {
					var tool = $("<a href=\"javascript:void(0);\"></a>").appendTo(_2c5);
					tool[0].onclick = eval(opts.tools[i].handler ||
					function() {});
					tool.linkbutton($.extend({}, opts.tools[i], {
						plain: true
					}));
				}
			}
		} else {
			_2c4.children("div.tabs-tool").remove();
		}
	};

	function _2c6(_2c7) {
		var opts = $.data(_2c7, "tabs").options;
		var cc = $(_2c7);
		opts.fit ? $.extend(opts, cc._fit()) : cc._fit(false);
		cc.width(opts.width).height(opts.height);
		var _2c8 = $(_2c7).children("div.tabs-header");
		var _2c9 = $(_2c7).children("div.tabs-panels");
		if (opts.tabPosition == "left" || opts.tabPosition == "right") {
			_2c8._outerWidth(opts.headerWidth);
			_2c9._outerWidth(cc.width() - opts.headerWidth);
			_2c8.add(_2c9)._outerHeight(opts.height);
			var wrap = _2c8.find("div.tabs-wrap");
			wrap._outerWidth(_2c8.width());
			_2c8.find(".tabs")._outerWidth(wrap.width());
		} else {
			_2c8.css("height", "");
			_2c8.find("div.tabs-wrap").css("width", "");
			_2c8.find(".tabs").css("width", "");
			_2c8._outerWidth(opts.width);
			_2bb(_2c7);
			var _2ca = opts.height;
			if (!isNaN(_2ca)) {
				_2c9._outerHeight(_2ca - _2c8.outerHeight());
			} else {
				_2c9.height("auto");
			}
			var _2cb = opts.width;
			if (!isNaN(_2cb)) {
				_2c9._outerWidth(_2cb);
			} else {
				_2c9.width("auto");
			}
		}
	};

	function _2cc(_2cd) {
		var opts = $.data(_2cd, "tabs").options;
		var tab = _2ce(_2cd);
		if (tab) {
			var _2cf = $(_2cd).children("div.tabs-panels");
			var _2d0 = opts.width == "auto" ? "auto" : _2cf.width();
			var _2d1 = opts.height == "auto" ? "auto" : _2cf.height();
			tab.panel("resize", {
				width: _2d0,
				height: _2d1
			});
		}
	};

	function _2d2(_2d3) {
		var tabs = $.data(_2d3, "tabs").tabs;
		var cc = $(_2d3);
		cc.addClass("tabs-container");
		cc.wrapInner("<div class=\"tabs-panels\"/>");
		$("<div class=\"tabs-header\">" + "<div class=\"tabs-scroller-left\"></div>" + "<div class=\"tabs-scroller-right\"></div>" + "<div class=\"tabs-wrap\">" + "<ul class=\"tabs\"></ul>" + "</div>" + "</div>").prependTo(_2d3);
		cc.children("div.tabs-panels").children("div").each(function(i) {
			var opts = $.extend({}, $.parser.parseOptions(this), {
				selected: ($(this).attr("selected") ? true : undefined)
			});
			var pp = $(this);
			tabs.push(pp);
			_2d9(_2d3, pp, opts);
		});
		cc.children("div.tabs-header").find(".tabs-scroller-left, .tabs-scroller-right").hover(function() {
			$(this).addClass("tabs-scroller-over");
		}, function() {
			$(this).removeClass("tabs-scroller-over");
		});
		cc.bind("_resize", function(e, _2d4) {
			var opts = $.data(_2d3, "tabs").options;
			if (opts.fit == true || _2d4) {
				_2c6(_2d3);
				_2cc(_2d3);
			}
			return false;
		});
	};

	function _2d5(_2d6) {
		var opts = $.data(_2d6, "tabs").options;
		var _2d7 = $(_2d6).children("div.tabs-header");
		var _2d8 = $(_2d6).children("div.tabs-panels");
		_2d7.removeClass("tabs-header-top tabs-header-bottom tabs-header-left tabs-header-right");
		_2d8.removeClass("tabs-panels-top tabs-panels-bottom tabs-panels-left tabs-panels-right");
		if (opts.tabPosition == "top") {
			_2d7.insertBefore(_2d8);
		} else {
			if (opts.tabPosition == "bottom") {
				_2d7.insertAfter(_2d8);
				_2d7.addClass("tabs-header-bottom");
				_2d8.addClass("tabs-panels-top");
			} else {
				if (opts.tabPosition == "left") {
					_2d7.addClass("tabs-header-left");
					_2d8.addClass("tabs-panels-right");
				} else {
					if (opts.tabPosition == "right") {
						_2d7.addClass("tabs-header-right");
						_2d8.addClass("tabs-panels-left");
					}
				}
			}
		}
		if (opts.plain == true) {
			_2d7.addClass("tabs-header-plain");
		} else {
			_2d7.removeClass("tabs-header-plain");
		}
		if (opts.border == true) {
			_2d7.removeClass("tabs-header-noborder");
			_2d8.removeClass("tabs-panels-noborder");
		} else {
			_2d7.addClass("tabs-header-noborder");
			_2d8.addClass("tabs-panels-noborder");
		}
		$(".tabs-scroller-left", _2d7).unbind(".tabs").bind("click.tabs", function() {
			$(_2d6).tabs("scrollBy", -opts.scrollIncrement);
		});
		$(".tabs-scroller-right", _2d7).unbind(".tabs").bind("click.tabs", function() {
			$(_2d6).tabs("scrollBy", opts.scrollIncrement);
		});
	};

	function _2d9(_2da, pp, _2db) {
		var _2dc = $.data(_2da, "tabs");
		_2db = _2db || {};
		pp.panel($.extend({}, _2db, {
			border: false,
			noheader: true,
			closed: true,
			doSize: false,
			iconCls: (_2db.icon ? _2db.icon : undefined),
			onLoad: function() {
				if (_2db.onLoad) {
					_2db.onLoad.call(this, arguments);
				}
				_2dc.options.onLoad.call(_2da, $(this));
			}
		}));
		var opts = pp.panel("options");
		var tabs = $(_2da).children("div.tabs-header").find("ul.tabs");
		opts.tab = $("<li></li>").appendTo(tabs);
		opts.tab.append("<a href=\"javascript:void(0)\" class=\"tabs-inner\">" + "<span class=\"tabs-title\"></span>" + "<span class=\"tabs-icon\"></span>" + "</a>");
		opts.tab.unbind(".tabs").bind("click.tabs", {
			p: pp
		}, function(e) {
			if ($(this).hasClass("tabs-disabled")) {
				return;
			}
			_2e1(_2da, _2dd(_2da, e.data.p));
		}).bind("contextmenu.tabs", {
			p: pp
		}, function(e) {
			if ($(this).hasClass("tabs-disabled")) {
				return;
			}
			_2dc.options.onContextMenu.call(_2da, e, $(this).find("span.tabs-title").html(), _2dd(_2da, e.data.p));
		});
		$(_2da).tabs("update", {
			tab: pp,
			options: opts
		});
	};

	function _2de(_2df, _2e0) {
		var opts = $.data(_2df, "tabs").options;
		var tabs = $.data(_2df, "tabs").tabs;
		if (_2e0.selected == undefined) {
			_2e0.selected = true;
		}
		var pp = $("<div></div>").appendTo($(_2df).children("div.tabs-panels"));
		tabs.push(pp);
		_2d9(_2df, pp, _2e0);
		opts.onAdd.call(_2df, _2e0.title, tabs.length - 1);
		_2bb(_2df);
		if (_2e0.selected) {
			_2e1(_2df, tabs.length - 1);
		}
	};

	function _2e2(_2e3, _2e4) {
		var _2e5 = $.data(_2e3, "tabs").selectHis;
		var pp = _2e4.tab;
		var _2e6 = pp.panel("options").title;
		pp.panel($.extend({}, _2e4.options, {
			iconCls: (_2e4.options.icon ? _2e4.options.icon : undefined)
		}));
		var opts = pp.panel("options");
		var tab = opts.tab;
		var _2e7 = tab.find("span.tabs-title");
		var _2e8 = tab.find("span.tabs-icon");
		_2e7.html(opts.title);
		_2e8.attr("class", "tabs-icon");
		tab.find("a.tabs-close").remove();
		tab.find("span.tabs-colse-wp").remove();
		tab.find("span.tabs-colse-wp").remove();
		if (opts.closable) {
			_2e7.addClass("tabs-closable");
			var _2e9 = $("<a href=\"javascript:void(0)\" class=\"tabs-close\"><span class=\"tabs-close-inner\"></span><span class=\"tabs-close-icon\"></span></a>").appendTo(tab);
			_2e9.bind("click.tabs", {
				p: pp
			}, function(e) {
				if ($(this).parent().hasClass("tabs-disabled")) {
					return;
				}
				_2eb(_2e3, _2dd(_2e3, e.data.p));
				return false;
			});
		} else {
			_2e7.removeClass("tabs-closable");
		}
		if (opts.iconCls) {
			_2e7.addClass("tabs-with-icon");
			_2e8.addClass(opts.iconCls);
		} else {
			_2e7.removeClass("tabs-with-icon");
		}
		if (_2e6 != opts.title) {
			for (var i = 0; i < _2e5.length; i++) {
				if (_2e5[i] == _2e6) {
					_2e5[i] = opts.title;
				}
			}
		}
		tab.find("span.tabs-p-tool").remove();
		if (opts.tools) {
			var _2ea = $("<span class=\"tabs-p-tool\"></span>").insertAfter(tab.find("a.tabs-inner"));
			if (typeof opts.tools == "string") {
				$(opts.tools).children().appendTo(_2ea);
			} else {
				for (var i = 0; i < opts.tools.length; i++) {
					var t = $("<a href=\"javascript:void(0)\"></a>").appendTo(_2ea);
					t.addClass(opts.tools[i].iconCls);
					if (opts.tools[i].handler) {
						t.bind("click", {
							handler: opts.tools[i].handler
						}, function(e) {
							if ($(this).parents("li").hasClass("tabs-disabled")) {
								return;
							}
							e.data.handler.call(this);
						});
					}
				}
			}
			var pr = _2ea.children().length * 12;
			if (opts.closable) {
				pr += 8;
			} else {
				pr -= 3;
				_2ea.css("right", "5px");
			}
			_2e7.css("padding-right", pr + "px");
		}
		_2bb(_2e3);
		$.data(_2e3, "tabs").options.onUpdate.call(_2e3, opts.title, _2dd(_2e3, pp));
	};

	function _2eb(_2ec, _2ed) {
		var opts = $.data(_2ec, "tabs").options;
		var tabs = $.data(_2ec, "tabs").tabs;
		var _2ee = $.data(_2ec, "tabs").selectHis;
		if (!_2ef(_2ec, _2ed)) {
			return;
		}
		var tab = _2f0(_2ec, _2ed);
		var _2f1 = tab.panel("options").title;
		var _2f2 = _2dd(_2ec, tab);
		if (opts.onBeforeClose.call(_2ec, _2f1, _2f2) == false) {
			return;
		}
		var tab = _2f0(_2ec, _2ed, true);
		tab.panel("options").tab.remove();
		tab.panel("destroy");
		opts.onClose.call(_2ec, _2f1, _2f2);
		_2bb(_2ec);
		for (var i = 0; i < _2ee.length; i++) {
			if (_2ee[i] == _2f1) {
				_2ee.splice(i, 1);
				i--;
			}
		}
		var _2f3 = _2ee.pop();
		if (_2f3) {
			_2e1(_2ec, _2f3);
		} else {
			if (tabs.length) {
				_2e1(_2ec, 0);
			}
		}
	};

	function _2f0(_2f4, _2f5, _2f6) {
		var tabs = $.data(_2f4, "tabs").tabs;
		if (typeof _2f5 == "number") {
			if (_2f5 < 0 || _2f5 >= tabs.length) {
				return null;
			} else {
				var tab = tabs[_2f5];
				if (_2f6) {
					tabs.splice(_2f5, 1);
				}
				return tab;
			}
		}
		for (var i = 0; i < tabs.length; i++) {
			var tab = tabs[i];
			if (tab.panel("options").title == _2f5) {
				if (_2f6) {
					tabs.splice(i, 1);
				}
				return tab;
			}
		}
		return null;
	};

	function _2dd(_2f7, tab) {
		var tabs = $.data(_2f7, "tabs").tabs;
		for (var i = 0; i < tabs.length; i++) {
			if (tabs[i][0] == $(tab)[0]) {
				return i;
			}
		}
		return -1;
	};

	function _2ce(_2f8) {
		var tabs = $.data(_2f8, "tabs").tabs;
		for (var i = 0; i < tabs.length; i++) {
			var tab = tabs[i];
			if (tab.panel("options").closed == false) {
				return tab;
			}
		}
		return null;
	};

	function _2f9(_2fa) {
		var tabs = $.data(_2fa, "tabs").tabs;
		for (var i = 0; i < tabs.length; i++) {
			if (tabs[i].panel("options").selected) {
				_2e1(_2fa, i);
				return;
			}
		}
		if (tabs.length) {
			_2e1(_2fa, 0);
		}
	};

	function _2e1(_2fb, _2fc) {
		var opts = $.data(_2fb, "tabs").options;
		var tabs = $.data(_2fb, "tabs").tabs;
		var _2fd = $.data(_2fb, "tabs").selectHis;
		if (tabs.length == 0) {
			return;
		}
		var _2fe = _2f0(_2fb, _2fc);
		if (!_2fe) {
			return;
		}
		var _2ff = _2ce(_2fb);
		if (_2ff) {
			_2ff.panel("close");
			_2ff.panel("options").tab.removeClass("tabs-selected");
		}
		_2fe.panel("open");
		var _300 = _2fe.panel("options").title;
		_2fd.push(_300);
		var tab = _2fe.panel("options").tab;
		tab.addClass("tabs-selected");
		var wrap = $(_2fb).find(">div.tabs-header>div.tabs-wrap");
		var left = tab.position().left;
		var _301 = left + tab.outerWidth();
		if (left < 0 || _301 > wrap.width()) {
			var _302 = left - (wrap.width() - tab.width()) / 2;
			$(_2fb).tabs("scrollBy", _302);
		} else {
			$(_2fb).tabs("scrollBy", 0);
		}
		_2cc(_2fb);
		opts.onSelect.call(_2fb, _300, _2dd(_2fb, _2fe));
	};

	function _2ef(_303, _304) {
		return _2f0(_303, _304) != null;
	};
	$.fn.tabs = function(_305, _306) {
		if (typeof _305 == "string") {
			return $.fn.tabs.methods[_305](this, _306);
		}
		_305 = _305 || {};
		return this.each(function() {
			var _307 = $.data(this, "tabs");
			var opts;
			if (_307) {
				opts = $.extend(_307.options, _305);
				_307.options = opts;
			} else {
				$.data(this, "tabs", {
					options: $.extend({}, $.fn.tabs.defaults, $.fn.tabs.parseOptions(this), _305),
					tabs: [],
					selectHis: []
				});
				_2d2(this);
			}
			_2c2(this);
			_2d5(this);
			_2c6(this);
			_2f9(this);
		});
	};
	$.fn.tabs.methods = {
		options: function(jq) {
			return $.data(jq[0], "tabs").options;
		},
		tabs: function(jq) {
			return $.data(jq[0], "tabs").tabs;
		},
		resize: function(jq) {
			return jq.each(function() {
				_2c6(this);
				_2cc(this);
			});
		},
		add: function(jq, _308) {
			return jq.each(function() {
				_2de(this, _308);
			});
		},
		close: function(jq, _309) {
			return jq.each(function() {
				_2eb(this, _309);
			});
		},
		getTab: function(jq, _30a) {
			return _2f0(jq[0], _30a);
		},
		getTabIndex: function(jq, tab) {
			return _2dd(jq[0], tab);
		},
		getSelected: function(jq) {
			return _2ce(jq[0]);
		},
		select: function(jq, _30b) {
			return jq.each(function() {
				_2e1(this, _30b);
			});
		},
		exists: function(jq, _30c) {
			return _2ef(jq[0], _30c);
		},
		update: function(jq, _30d) {
			return jq.each(function() {
				_2e2(this, _30d);
			});
		},
		enableTab: function(jq, _30e) {
			return jq.each(function() {
				$(this).tabs("getTab", _30e).panel("options").tab.removeClass("tabs-disabled");
			});
		},
		disableTab: function(jq, _30f) {
			return jq.each(function() {
				$(this).tabs("getTab", _30f).panel("options").tab.addClass("tabs-disabled");
			});
		},
		scrollBy: function(jq, _310) {
			return jq.each(function() {
				var opts = $(this).tabs("options");
				var wrap = $(this).find(">div.tabs-header>div.tabs-wrap");
				var pos = Math.min(wrap._scrollLeft() + _310, _311());
				wrap.animate({
					scrollLeft: pos
				}, opts.scrollDuration);

				function _311() {
					var w = 0;
					var ul = wrap.children("ul");
					ul.children("li").each(function() {
						w += $(this).outerWidth(true);
					});
					return w - wrap.width() + (ul.outerWidth() - ul.width());
				};
			});
		}
	};
	$.fn.tabs.parseOptions = function(_312) {
		return $.extend({}, $.parser.parseOptions(_312, ["width", "height", "tools", "toolPosition", "tabPosition",
		{
			fit: "boolean",
			border: "boolean",
			plain: "boolean",
			headerWidth: "number"
		}]));
	};
	$.fn.tabs.defaults = {
		width: "auto",
		height: "auto",
		headerWidth: 150,
		plain: false,
		fit: false,
		border: true,
		tools: null,
		toolPosition: "right",
		tabPosition: "top",
		scrollIncrement: 100,
		scrollDuration: 400,
		onLoad: function(_313) {},
		onSelect: function(_314, _315) {},
		onBeforeClose: function(_316, _317) {},
		onClose: function(_318, _319) {},
		onAdd: function(_31a, _31b) {},
		onUpdate: function(_31c, _31d) {},
		onContextMenu: function(e, _31e, _31f) {}
	};
})(jQuery);

(function($) {
	var _320 = false;

	function _321(_322) {
		var _323 = $.data(_322, "layout");
		var opts = _323.options;
		var _324 = _323.panels;
		var cc = $(_322);
		if (_322.tagName == "BODY") {
			cc._fit();
		} else {
			opts.fit ? cc.css(cc._fit()) : cc._fit(false);
		}
		var cpos = {
			top: 0,
			left: 0,
			width: cc.width(),
			height: cc.height()
		};

		function _325(pp) {
			if (pp.length == 0) {
				return;
			}
			var opts = pp.panel("options");
			var _326 = Math.min(Math.max(opts.height, opts.minHeight), opts.maxHeight);
			pp.panel("resize", {
				width: cc.width(),
				height: _326,
				left: 0,
				top: 0
			});
			cpos.top += _326;
			cpos.height -= _326;
		};
		if (_32d(_324.expandNorth)) {
			_325(_324.expandNorth);
		} else {
			_325(_324.north);
		}

		function _327(pp) {
			if (pp.length == 0) {
				return;
			}
			var opts = pp.panel("options");
			var _328 = Math.min(Math.max(opts.height, opts.minHeight), opts.maxHeight);
			pp.panel("resize", {
				width: cc.width(),
				height: _328,
				left: 0,
				top: cc.height() - _328
			});
			cpos.height -= _328;
		};
		if (_32d(_324.expandSouth)) {
			_327(_324.expandSouth);
		} else {
			_327(_324.south);
		}

		function _329(pp) {
			if (pp.length == 0) {
				return;
			}
			var opts = pp.panel("options");
			var _32a = Math.min(Math.max(opts.width, opts.minWidth), opts.maxWidth);
			pp.panel("resize", {
				width: _32a,
				height: cpos.height,
				left: cc.width() - _32a,
				top: cpos.top
			});
			cpos.width -= _32a;
		};
		if (_32d(_324.expandEast)) {
			_329(_324.expandEast);
		} else {
			_329(_324.east);
		}

		function _32b(pp) {
			if (pp.length == 0) {
				return;
			}
			var opts = pp.panel("options");
			var _32c = Math.min(Math.max(opts.width, opts.minWidth), opts.maxWidth);
			pp.panel("resize", {
				width: _32c,
				height: cpos.height,
				left: 0,
				top: cpos.top
			});
			cpos.left += _32c;
			cpos.width -= _32c;
		};
		if (_32d(_324.expandWest)) {
			_32b(_324.expandWest);
		} else {
			_32b(_324.west);
		}
		_324.center.panel("resize", cpos);
	};

	function init(_32e) {
		var cc = $(_32e);
		cc.addClass("layout");

		function _32f(cc) {
			cc.children("div").each(function() {
				var opts = $.parser.parseOptions(this, ["region",
				{
					split: "boolean",
					minWidth: "number",
					minHeight: "number",
					maxWidth: "number",
					maxHeight: "number"
				}]);
				var r = opts.region;
				if (r == "north" || r == "south" || r == "east" || r == "west" || r == "center") {
					_331(_32e, opts, this);
				}
			});
		};
		cc.children("form").length ? _32f(cc.children("form")) : _32f(cc);
		$("<div class=\"layout-split-proxy-h\"></div>").appendTo(cc);
		$("<div class=\"layout-split-proxy-v\"></div>").appendTo(cc);
		cc.bind("_resize", function(e, _330) {
			var opts = $.data(_32e, "layout").options;
			if (opts.fit == true || _330) {
				_321(_32e);
			}
			return false;
		});
	};

	function _331(_332, _333, el) {
		_333.region = _333.region || "center";
		var _334 = $.data(_332, "layout").panels;
		var cc = $(_332);
		var dir = _333.region;
		if (_334[dir].length) {
			return;
		}
		var pp = $(el);
		if (!pp.length) {
			pp = $("<div></div>").appendTo(cc);
		}
		pp.panel($.extend({
			minWidth: 10,
			minHeight: 10,
			maxWidth: 10000,
			maxHeight: 10000
		}, {
			width: (pp.length ? parseInt(pp[0].style.width) || pp.outerWidth() : "auto"),
			height: (pp.length ? parseInt(pp[0].style.height) || pp.outerHeight() : "auto"),
			doSize: false,
			collapsible: true,
			cls: ("layout-panel layout-panel-" + dir),
			bodyCls: "layout-body",
			onOpen: function() {
				var tool = $(this).panel("header").children("div.panel-tool");
				tool.children("a.panel-tool-collapse").hide();
				var _335 = {
					north: "up",
					south: "down",
					east: "right",
					west: "left"
				};
				if (!_335[dir]) {
					return;
				}
				var _336 = "layout-button-" + _335[dir];
				var t = tool.children("a." + _336);
				if (!t.length) {
					t = $("<a href=\"javascript:void(0)\"></a>").addClass(_336).appendTo(tool);
					t.bind("click", {
						dir: dir
					}, function(e) {
						_342(_332, e.data.dir);
						return false;
					});
				}
				$(this).panel("options").collapsible ? t.show() : t.hide();
			}
		}, _333));
		_334[dir] = pp;
		if (pp.panel("options").split) {
			var _337 = pp.panel("panel");
			_337.addClass("layout-split-" + dir);
			var _338 = "";
			if (dir == "north") {
				_338 = "s";
			}
			if (dir == "south") {
				_338 = "n";
			}
			if (dir == "east") {
				_338 = "w";
			}
			if (dir == "west") {
				_338 = "e";
			}
			_337.resizable($.extend({}, {
				handles: _338,
				onStartResize: function(e) {
					_320 = true;
					if (dir == "north" || dir == "south") {
						var _339 = $(">div.layout-split-proxy-v", _332);
					} else {
						var _339 = $(">div.layout-split-proxy-h", _332);
					}
					var top = 0,
						left = 0,
						_33a = 0,
						_33b = 0;
					var pos = {
						display: "block"
					};
					if (dir == "north") {
						pos.top = parseInt(_337.css("top")) + _337.outerHeight() - _339.height();
						pos.left = parseInt(_337.css("left"));
						pos.width = _337.outerWidth();
						pos.height = _339.height();
					} else {
						if (dir == "south") {
							pos.top = parseInt(_337.css("top"));
							pos.left = parseInt(_337.css("left"));
							pos.width = _337.outerWidth();
							pos.height = _339.height();
						} else {
							if (dir == "east") {
								pos.top = parseInt(_337.css("top")) || 0;
								pos.left = parseInt(_337.css("left")) || 0;
								pos.width = _339.width();
								pos.height = _337.outerHeight();
							} else {
								if (dir == "west") {
									pos.top = parseInt(_337.css("top")) || 0;
									pos.left = _337.outerWidth() - _339.width();
									pos.width = _339.width();
									pos.height = _337.outerHeight();
								}
							}
						}
					}
					_339.css(pos);
					$("<div class=\"layout-mask\"></div>").css({
						left: 0,
						top: 0,
						width: cc.width(),
						height: cc.height()
					}).appendTo(cc);
				},
				onResize: function(e) {
					if (dir == "north" || dir == "south") {
						var _33c = $(">div.layout-split-proxy-v", _332);
						_33c.css("top", e.pageY - $(_332).offset().top - _33c.height() / 2);
					} else {
						var _33c = $(">div.layout-split-proxy-h", _332);
						_33c.css("left", e.pageX - $(_332).offset().left - _33c.width() / 2);
					}
					return false;
				},
				onStopResize: function() {
					$(">div.layout-split-proxy-v", _332).css("display", "none");
					$(">div.layout-split-proxy-h", _332).css("display", "none");
					var opts = pp.panel("options");
					opts.width = _337.outerWidth();
					opts.height = _337.outerHeight();
					opts.left = _337.css("left");
					opts.top = _337.css("top");
					pp.panel("resize");
					_321(_332);
					_320 = false;
					cc.find(">div.layout-mask").remove();
				}
			}, _333));
		}
	};

	function _33d(_33e, _33f) {
		var _340 = $.data(_33e, "layout").panels;
		if (_340[_33f].length) {
			_340[_33f].panel("destroy");
			_340[_33f] = $();
			var _341 = "expand" + _33f.substring(0, 1).toUpperCase() + _33f.substring(1);
			if (_340[_341]) {
				_340[_341].panel("destroy");
				_340[_341] = undefined;
			}
		}
	};

	function _342(_343, _344, _345) {
		if (_345 == undefined) {
			_345 = "normal";
		}
		var _346 = $.data(_343, "layout").panels;
		var p = _346[_344];
		if (p.panel("options").onBeforeCollapse.call(p) == false) {
			return;
		}
		var _347 = "expand" + _344.substring(0, 1).toUpperCase() + _344.substring(1);
		if (!_346[_347]) {
			_346[_347] = _348(_344);
			_346[_347].panel("panel").click(function() {
				var _349 = _34a();
				p.panel("expand", false).panel("open").panel("resize", _349.collapse);
				p.panel("panel").animate(_349.expand, _345, function() {
					$(this).unbind(".layout").bind("mouseleave.layout", {
						region: _344
					}, function(e) {
						if (_320 == true) {
							return;
						}
						_342(_343, e.data.region);
					});
				});
				return false;
			});
		}
		var _34b = _34a();
		if (!_32d(_346[_347])) {
			_346.center.panel("resize", _34b.resizeC);
		}
		p.panel("panel").animate(_34b.collapse, _345, function() {
			p.panel("collapse", false).panel("close");
			_346[_347].panel("open").panel("resize", _34b.expandP);
			$(this).unbind(".layout");
		});

		function _348(dir) {
			var icon;
			if (dir == "east") {
				icon = "layout-button-left";
			} else {
				if (dir == "west") {
					icon = "layout-button-right";
				} else {
					if (dir == "north") {
						icon = "layout-button-down";
					} else {
						if (dir == "south") {
							icon = "layout-button-up";
						}
					}
				}
			}
			var p = $("<div></div>").appendTo(_343).panel({
				cls: "layout-expand",
				title: "&nbsp;",
				closed: true,
				doSize: false,
				tools: [{
					iconCls: icon,
					handler: function() {
						_34c(_343, _344);
						return false;
					}
				}]
			});
			p.panel("panel").hover(function() {
				$(this).addClass("layout-expand-over");
			}, function() {
				$(this).removeClass("layout-expand-over");
			});
			return p;
		};

		function _34a() {
			var cc = $(_343);
			if (_344 == "east") {
				return {
					resizeC: {
						width: _346.center.panel("options").width + _346["east"].panel("options").width - 28
					},
					expand: {
						left: cc.width() - _346["east"].panel("options").width
					},
					expandP: {
						top: _346["east"].panel("options").top,
						left: cc.width() - 28,
						width: 28,
						height: _346["center"].panel("options").height
					},
					collapse: {
						left: cc.width()
					}
				};
			} else {
				if (_344 == "west") {
					return {
						resizeC: {
							width: _346.center.panel("options").width + _346["west"].panel("options").width - 28,
							left: 28
						},
						expand: {
							left: 0
						},
						expandP: {
							left: 0,
							top: _346["west"].panel("options").top,
							width: 28,
							height: _346["center"].panel("options").height
						},
						collapse: {
							left: -_346["west"].panel("options").width
						}
					};
				} else {
					if (_344 == "north") {
						var hh = cc.height() - 28;
						if (_32d(_346.expandSouth)) {
							hh -= _346.expandSouth.panel("options").height;
						} else {
							if (_32d(_346.south)) {
								hh -= _346.south.panel("options").height;
							}
						}
						_346.east.panel("resize", {
							top: 28,
							height: hh
						});
						_346.west.panel("resize", {
							top: 28,
							height: hh
						});
						if (_32d(_346.expandEast)) {
							_346.expandEast.panel("resize", {
								top: 28,
								height: hh
							});
						}
						if (_32d(_346.expandWest)) {
							_346.expandWest.panel("resize", {
								top: 28,
								height: hh
							});
						}
						return {
							resizeC: {
								top: 28,
								height: hh
							},
							expand: {
								top: 0
							},
							expandP: {
								top: 0,
								left: 0,
								width: cc.width(),
								height: 28
							},
							collapse: {
								top: -_346["north"].panel("options").height
							}
						};
					} else {
						if (_344 == "south") {
							var hh = cc.height() - 28;
							if (_32d(_346.expandNorth)) {
								hh -= _346.expandNorth.panel("options").height;
							} else {
								if (_32d(_346.north)) {
									hh -= _346.north.panel("options").height;
								}
							}
							_346.east.panel("resize", {
								height: hh
							});
							_346.west.panel("resize", {
								height: hh
							});
							if (_32d(_346.expandEast)) {
								_346.expandEast.panel("resize", {
									height: hh
								});
							}
							if (_32d(_346.expandWest)) {
								_346.expandWest.panel("resize", {
									height: hh
								});
							}
							return {
								resizeC: {
									height: hh
								},
								expand: {
									top: cc.height() - _346["south"].panel("options").height
								},
								expandP: {
									top: cc.height() - 28,
									left: 0,
									width: cc.width(),
									height: 28
								},
								collapse: {
									top: cc.height()
								}
							};
						}
					}
				}
			}
		};
	};

	function _34c(_34d, _34e) {
		var _34f = $.data(_34d, "layout").panels;
		var _350 = _351();
		var p = _34f[_34e];
		if (p.panel("options").onBeforeExpand.call(p) == false) {
			return;
		}
		var _352 = "expand" + _34e.substring(0, 1).toUpperCase() + _34e.substring(1);
		_34f[_352].panel("close");
		p.panel("panel").stop(true, true);
		p.panel("expand", false).panel("open").panel("resize", _350.collapse);
		p.panel("panel").animate(_350.expand, function() {
			_321(_34d);
		});

		function _351() {
			var cc = $(_34d);
			if (_34e == "east" && _34f.expandEast) {
				return {
					collapse: {
						left: cc.width()
					},
					expand: {
						left: cc.width() - _34f["east"].panel("options").width
					}
				};
			} else {
				if (_34e == "west" && _34f.expandWest) {
					return {
						collapse: {
							left: -_34f["west"].panel("options").width
						},
						expand: {
							left: 0
						}
					};
				} else {
					if (_34e == "north" && _34f.expandNorth) {
						return {
							collapse: {
								top: -_34f["north"].panel("options").height
							},
							expand: {
								top: 0
							}
						};
					} else {
						if (_34e == "south" && _34f.expandSouth) {
							return {
								collapse: {
									top: cc.height()
								},
								expand: {
									top: cc.height() - _34f["south"].panel("options").height
								}
							};
						}
					}
				}
			}
		};
	};

	function _32d(pp) {
		if (!pp) {
			return false;
		}
		if (pp.length) {
			return pp.panel("panel").is(":visible");
		} else {
			return false;
		}
	};

	function _353(_354) {
		var _355 = $.data(_354, "layout").panels;
		if (_355.east.length && _355.east.panel("options").collapsed) {
			_342(_354, "east", 0);
		}
		if (_355.west.length && _355.west.panel("options").collapsed) {
			_342(_354, "west", 0);
		}
		if (_355.north.length && _355.north.panel("options").collapsed) {
			_342(_354, "north", 0);
		}
		if (_355.south.length && _355.south.panel("options").collapsed) {
			_342(_354, "south", 0);
		}
	};
	$.fn.layout = function(_356, _357) {
		if (typeof _356 == "string") {
			return $.fn.layout.methods[_356](this, _357);
		}
		_356 = _356 || {};
		return this.each(function() {
			var _358 = $.data(this, "layout");
			if (_358) {
				$.extend(_358.options, _356);
			} else {
				var opts = $.extend({}, $.fn.layout.defaults, $.fn.layout.parseOptions(this), _356);
				$.data(this, "layout", {
					options: opts,
					panels: {
						center: $(),
						north: $(),
						south: $(),
						east: $(),
						west: $()
					}
				});
				init(this);
			}
			_321(this);
			_353(this);
		});
	};
	$.fn.layout.methods = {
		resize: function(jq) {
			return jq.each(function() {
				_321(this);
			});
		},
		panel: function(jq, _359) {
			return $.data(jq[0], "layout").panels[_359];
		},
		collapse: function(jq, _35a) {
			return jq.each(function() {
				_342(this, _35a);
			});
		},
		expand: function(jq, _35b) {
			return jq.each(function() {
				_34c(this, _35b);
			});
		},
		add: function(jq, _35c) {
			return jq.each(function() {
				_331(this, _35c);
				_321(this);
				if ($(this).layout("panel", _35c.region).panel("options").collapsed) {
					_342(this, _35c.region, 0);
				}
			});
		},
		remove: function(jq, _35d) {
			return jq.each(function() {
				_33d(this, _35d);
				_321(this);
			});
		}
	};
	$.fn.layout.parseOptions = function(_35e) {
		return $.extend({}, $.parser.parseOptions(_35e, [{
			fit: "boolean"
		}]));
	};
	$.fn.layout.defaults = {
		fit: false
	};
})(jQuery);